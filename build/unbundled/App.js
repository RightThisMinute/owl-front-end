"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const queryMiddleware = require("farce/lib/queryMiddleware");
const createRender = require("found/lib/createRender");
const makeRouteConfig = require("found/lib/makeRouteConfig");
const Route = require("found/lib/Route");
const React = require("react");
const { graphql } = require('react-relay');
const found_relay_1 = require("found-relay");
const relay_runtime_1 = require("relay-runtime");
const viewport = require("./viewport");
const Main_1 = require("./components/Main");
const VideoList_1 = require("./components/VideoList");
const SetActiveVideosPage_1 = require("./components/SetActiveVideosPage");
const ErrorPage_1 = require("./components/ErrorPage");
class AppFrame extends React.Component {
    constructor(props) {
        super(props);
        viewport.init();
    }
    render() {
        return (React.createElement(Main_1.default, null, this.props.children));
    }
}
exports.historyMiddlewares = [queryMiddleware];
function createResolver(fetcher) {
    const environment = new relay_runtime_1.Environment({
        network: relay_runtime_1.Network.create((...args) => fetcher.fetch(...args)),
        store: new relay_runtime_1.Store(new relay_runtime_1.RecordSource()),
    });
    return new found_relay_1.Resolver(environment);
}
exports.createResolver = createResolver;
exports.renderConfig = createRender({
    renderError: ({ error }) => {
        return (React.createElement(AppFrame, null,
            React.createElement(ErrorPage_1.default, { error: error })));
    }
});
const ActiveVideosQuery = graphql `
	query App_ActiveVideos_Query($statsAge: Int!) {
		activeVideos {
			...SetActiveVideosPage_activeVideos
			...VideoList_activeVideos
		}
	}
`;
const aDay = 4 * 24 * 60 * 60;
exports.routeConfig = makeRouteConfig(React.createElement(Route, { path: "/", Component: AppFrame },
    React.createElement(Route, { Component: VideoList_1.default, query: ActiveVideosQuery, prepareVariables: params => (Object.assign({}, params, { statsAge: aDay })) }),
    React.createElement(Route, { path: "videos/forms/set_active", Component: SetActiveVideosPage_1.default, query: ActiveVideosQuery, prepareVariables: params => (Object.assign({}, params, { statsAge: aDay })) })));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL0FwcC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSw2REFBNkQ7QUFDN0QsdURBQXVEO0FBQ3ZELDZEQUE2RDtBQUM3RCx5Q0FBeUM7QUFDekMsK0JBQThCO0FBQzlCLE1BQU0sRUFBRSxPQUFPLEVBQUUsR0FBRyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUE7QUFDMUMsNkNBQXNDO0FBQ3RDLGlEQUF5RTtBQUV6RSx1Q0FBc0M7QUFFdEMsNENBQW9DO0FBQ3BDLHNEQUE4QztBQUM5QywwRUFBa0U7QUFDbEUsc0RBQThDO0FBRTlDLGNBQWUsU0FBUSxLQUFLLENBQUMsU0FBbUM7SUFFL0QsWUFBWSxLQUFLO1FBQ2hCLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUNaLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtJQUNoQixDQUFDO0lBRUQsTUFBTTtRQUFLLE1BQU0sQ0FBQyxDQUNqQixvQkFBQyxjQUFJLFFBQ0gsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQ2QsQ0FDUCxDQUFBO0lBQUEsQ0FBQztDQUVGO0FBR1ksUUFBQSxrQkFBa0IsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFBO0FBR25ELHdCQUErQixPQUFPO0lBQ3JDLE1BQU0sV0FBVyxHQUFHLElBQUksMkJBQVcsQ0FBQztRQUNuQyxPQUFPLEVBQUUsdUJBQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLElBQUksS0FBSyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7UUFDNUQsS0FBSyxFQUFFLElBQUkscUJBQUssQ0FBQyxJQUFJLDRCQUFZLEVBQUUsQ0FBQztLQUNwQyxDQUFDLENBQUM7SUFFSCxNQUFNLENBQUMsSUFBSSxzQkFBUSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ2xDLENBQUM7QUFQRCx3Q0FPQztBQUdZLFFBQUEsWUFBWSxHQUFHLFlBQVksQ0FBQztJQUN4QyxXQUFXLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRTtRQUFPLE1BQU0sQ0FBQyxDQUNwQyxvQkFBQyxRQUFRO1lBQ1Isb0JBQUMsbUJBQVMsSUFBQyxLQUFLLEVBQUUsS0FBSyxHQUFHLENBQ2hCLENBQ1gsQ0FBQTtJQUFDLENBQUM7Q0FDSCxDQUFDLENBQUE7QUFHRixNQUFNLGlCQUFpQixHQUFHLE9BQU8sQ0FBQTs7Ozs7OztDQU9oQyxDQUFBO0FBRUQsTUFBTSxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFBO0FBRWhCLFFBQUEsV0FBVyxHQUFHLGVBQWUsQ0FDekMsb0JBQUMsS0FBSyxJQUFDLElBQUksRUFBQyxHQUFHLEVBQUMsU0FBUyxFQUFFLFFBQVE7SUFDbEMsb0JBQUMsS0FBSyxJQUFDLFNBQVMsRUFBRSxtQkFBUyxFQUFFLEtBQUssRUFBRSxpQkFBaUIsRUFDOUMsZ0JBQWdCLEVBQUUsTUFBTSxJQUFJLG1CQUFNLE1BQU0sSUFBRSxRQUFRLEVBQUUsSUFBSSxJQUFHLEdBQUk7SUFDdEUsb0JBQUMsS0FBSyxJQUFDLElBQUksRUFBQyx5QkFBeUIsRUFDOUIsU0FBUyxFQUFFLDZCQUFtQixFQUFFLEtBQUssRUFBRSxpQkFBaUIsRUFDeEQsZ0JBQWdCLEVBQUUsTUFBTSxJQUFJLG1CQUFNLE1BQU0sSUFBRSxRQUFRLEVBQUUsSUFBSSxJQUFHLEdBQUksQ0FDL0QsQ0FDUixDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgcXVlcnlNaWRkbGV3YXJlID0gcmVxdWlyZSgnZmFyY2UvbGliL3F1ZXJ5TWlkZGxld2FyZScpXG5pbXBvcnQgY3JlYXRlUmVuZGVyID0gcmVxdWlyZSgnZm91bmQvbGliL2NyZWF0ZVJlbmRlcicpXG5pbXBvcnQgbWFrZVJvdXRlQ29uZmlnID0gcmVxdWlyZSgnZm91bmQvbGliL21ha2VSb3V0ZUNvbmZpZycpXG5pbXBvcnQgUm91dGUgPSByZXF1aXJlKCdmb3VuZC9saWIvUm91dGUnKVxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnXG5jb25zdCB7IGdyYXBocWwgfSA9IHJlcXVpcmUoJ3JlYWN0LXJlbGF5JylcbmltcG9ydCB7IFJlc29sdmVyIH0gZnJvbSAnZm91bmQtcmVsYXknXG5pbXBvcnQgeyBFbnZpcm9ubWVudCwgTmV0d29yaywgUmVjb3JkU291cmNlLCBTdG9yZSB9IGZyb20gJ3JlbGF5LXJ1bnRpbWUnXG5cbmltcG9ydCAqIGFzIHZpZXdwb3J0IGZyb20gJy4vdmlld3BvcnQnXG5pbXBvcnQgUm91dGVDb21wb25lbnRQcm9wcyBmcm9tICcuL3Byb3BzL1JvdXRlQ29tcG9uZW50J1xuaW1wb3J0IE1haW4gZnJvbSAnLi9jb21wb25lbnRzL01haW4nXG5pbXBvcnQgVmlkZW9MaXN0IGZyb20gJy4vY29tcG9uZW50cy9WaWRlb0xpc3QnXG5pbXBvcnQgU2V0QWN0aXZlVmlkZW9zUGFnZSBmcm9tICcuL2NvbXBvbmVudHMvU2V0QWN0aXZlVmlkZW9zUGFnZSdcbmltcG9ydCBFcnJvclBhZ2UgZnJvbSAnLi9jb21wb25lbnRzL0Vycm9yUGFnZSdcblxuY2xhc3MgQXBwRnJhbWUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8Um91dGVDb21wb25lbnRQcm9wcywgYW55PiB7XG5cblx0Y29uc3RydWN0b3IocHJvcHMpIHtcblx0XHRzdXBlcihwcm9wcylcblx0XHR2aWV3cG9ydC5pbml0KClcblx0fVxuXG5cdHJlbmRlcigpIHsgcmV0dXJuIChcblx0XHQ8TWFpbj5cblx0XHRcdHt0aGlzLnByb3BzLmNoaWxkcmVufVxuXHRcdDwvTWFpbj5cblx0KX1cblxufVxuXG5cbmV4cG9ydCBjb25zdCBoaXN0b3J5TWlkZGxld2FyZXMgPSBbcXVlcnlNaWRkbGV3YXJlXVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSZXNvbHZlcihmZXRjaGVyKSB7XG5cdGNvbnN0IGVudmlyb25tZW50ID0gbmV3IEVudmlyb25tZW50KHtcblx0XHRuZXR3b3JrOiBOZXR3b3JrLmNyZWF0ZSgoLi4uYXJncykgPT4gZmV0Y2hlci5mZXRjaCguLi5hcmdzKSksXG5cdFx0c3RvcmU6IG5ldyBTdG9yZShuZXcgUmVjb3JkU291cmNlKCkpLFxuXHR9KTtcblxuXHRyZXR1cm4gbmV3IFJlc29sdmVyKGVudmlyb25tZW50KTtcbn1cblxuXG5leHBvcnQgY29uc3QgcmVuZGVyQ29uZmlnID0gY3JlYXRlUmVuZGVyKHtcblx0cmVuZGVyRXJyb3I6ICh7IGVycm9yIH0pID0+IHsgcmV0dXJuIChcblx0XHQ8QXBwRnJhbWU+XG5cdFx0XHQ8RXJyb3JQYWdlIGVycm9yPXtlcnJvcn0vPlxuXHRcdDwvQXBwRnJhbWU+XG5cdCkgfVxufSlcblxuXG5jb25zdCBBY3RpdmVWaWRlb3NRdWVyeSA9IGdyYXBocWxgXG5cdHF1ZXJ5IEFwcF9BY3RpdmVWaWRlb3NfUXVlcnkoJHN0YXRzQWdlOiBJbnQhKSB7XG5cdFx0YWN0aXZlVmlkZW9zIHtcblx0XHRcdC4uLlNldEFjdGl2ZVZpZGVvc1BhZ2VfYWN0aXZlVmlkZW9zXG5cdFx0XHQuLi5WaWRlb0xpc3RfYWN0aXZlVmlkZW9zXG5cdFx0fVxuXHR9XG5gXG5cbmNvbnN0IGFEYXkgPSA0ICogMjQgKiA2MCAqIDYwXG5cbmV4cG9ydCBjb25zdCByb3V0ZUNvbmZpZyA9IG1ha2VSb3V0ZUNvbmZpZyhcblx0PFJvdXRlIHBhdGg9XCIvXCIgQ29tcG9uZW50PXtBcHBGcmFtZX0+XG5cdFx0PFJvdXRlIENvbXBvbmVudD17VmlkZW9MaXN0fSBxdWVyeT17QWN0aXZlVmlkZW9zUXVlcnl9XG5cdFx0ICAgICAgIHByZXBhcmVWYXJpYWJsZXM9e3BhcmFtcyA9PiAoeyAuLi5wYXJhbXMsIHN0YXRzQWdlOiBhRGF5IH0pfSAvPlxuXHRcdDxSb3V0ZSBwYXRoPVwidmlkZW9zL2Zvcm1zL3NldF9hY3RpdmVcIlxuXHRcdCAgICAgICBDb21wb25lbnQ9e1NldEFjdGl2ZVZpZGVvc1BhZ2V9IHF1ZXJ5PXtBY3RpdmVWaWRlb3NRdWVyeX1cblx0XHQgICAgICAgcHJlcGFyZVZhcmlhYmxlcz17cGFyYW1zID0+ICh7IC4uLnBhcmFtcywgc3RhdHNBZ2U6IGFEYXkgfSl9IC8+XG5cdDwvUm91dGU+XG4pXG4iXX0=