"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const react_chartjs_2_1 = require("react-chartjs-2");
const { createFragmentContainer, graphql } = require('react-relay');
const CHART_OPTS = {
    responsive: true,
    legend: { display: false },
    scales: {
        xAxes: [{
                display: false,
                gridLines: { display: false },
            }],
        yAxes: [{
                display: false,
                stacked: true,
                ticks: { display: false },
                gridLines: { display: false },
            }],
        gridLines: { display: false },
    },
};
class StatsChart extends React.Component {
    render() {
        const { data } = this;
        const totals = data.datasets.reduce((accl, { data }) => {
            data.forEach((value, index) => {
                accl[index] = (accl[index] || 0) + value;
            });
            return accl;
        }, []);
        const min = Math.min(...totals);
        let max = Math.max(...totals);
        // Prevent small changes appearing the same as big changes.
        const { scale } = this.props;
        if (max < scale * min)
            max = (scale * min);
        const yAxes = CHART_OPTS.scales.yAxes.map(axis => {
            return Object.assign({}, axis, {
                ticks: {
                    min, max,
                    beginAtZero: false,
                },
            });
        });
        const scales = Object.assign({}, CHART_OPTS.scales, {
            yAxes,
        });
        const opts = Object.assign({}, CHART_OPTS, { scales });
        return (React.createElement("div", { className: "chart-box" },
            React.createElement(react_chartjs_2_1.Line, { data: data, options: opts })));
    }
    get data() {
        const labels = (new Array(this.props.dataPointCount)
            .map((_, index) => `${index}`));
        let datasets = [
            { label: 'views', borderColor: '#777', },
            { label: 'dislikes', borderColor: '#999', },
            { label: 'likes', borderColor: '#bbb', },
            { label: 'comments', borderColor: '#555', },
            { label: 'favorites', borderColor: '#333', },
        ];
        datasets = datasets.map(dataset => {
            dataset.backgroundColor = dataset.backgroundColor || dataset.borderColor;
            dataset.data = [];
            dataset.pointRadius = 1;
            return dataset;
        });
        this.props.snapshots.forEach(snapshot => {
            datasets.forEach(({ label = '[ERROR]', data = [] }) => {
                data.push(Number(snapshot[label]));
            });
        });
        const maxCount = 1;
        return { labels, datasets };
    }
}
exports.default = createFragmentContainer(StatsChart, graphql `
	fragment StatsChart_snapshots on VideoStats @relay(plural: true) {
		views
		likes
		dislikes
		favorites
		comments
	}
`);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RhdHNDaGFydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1N0YXRzQ2hhcnQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsK0JBQThCO0FBRTlCLHFEQUFzQztBQUV0QyxNQUFNLEVBQUUsdUJBQXVCLEVBQUUsT0FBTyxFQUFFLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFBO0FBa0JuRSxNQUFNLFVBQVUsR0FBaUI7SUFDaEMsVUFBVSxFQUFFLElBQUk7SUFDaEIsTUFBTSxFQUFFLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRTtJQUMxQixNQUFNLEVBQUU7UUFDUCxLQUFLLEVBQUUsQ0FBQztnQkFDUCxPQUFPLEVBQUUsS0FBSztnQkFDZCxTQUFTLEVBQUUsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFO2FBQzdCLENBQUM7UUFDRixLQUFLLEVBQUUsQ0FBQztnQkFDUCxPQUFPLEVBQUUsS0FBSztnQkFDZCxPQUFPLEVBQUUsSUFBSTtnQkFDYixLQUFLLEVBQUUsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFO2dCQUN6QixTQUFTLEVBQUUsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFO2FBQzdCLENBQUM7UUFDRixTQUFTLEVBQUUsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFO0tBQzdCO0NBQ0QsQ0FBQTtBQUVELGdCQUFpQixTQUFRLEtBQUssQ0FBQyxTQUFxQjtJQUVuRCxNQUFNO1FBQ0wsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQTtRQUVyQixNQUFNLE1BQU0sR0FBSSxJQUFJLENBQUMsUUFBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQWMsRUFBRSxFQUFFLElBQUksRUFBRTtZQUM3RCxJQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxLQUFLO2dCQUN2QyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElB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QUFDLENBQUE7UUFDSCxDQUFDLENBQUMsQ0FBQTtRQUVGLE1BQU0sUUFBUSxHQUFHLENBQUMsQ0FBQTtRQUVsQixNQUFNLENBQUMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLENBQUE7SUFDNUIsQ0FBQztDQUNEO0FBR0Qsa0JBQWUsdUJBQXVCLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQTs7Ozs7Ozs7Q0FRekQsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IENoYXJ0RGF0YSwgQ2hhcnREYXRhU2V0cywgQ2hhcnRPcHRpb25zIH0gZnJvbSAnY2hhcnQuanMnXG5pbXBvcnQgeyBMaW5lIH0gZnJvbSAncmVhY3QtY2hhcnRqcy0yJ1xuXG5jb25zdCB7IGNyZWF0ZUZyYWdtZW50Q29udGFpbmVyLCBncmFwaHFsIH0gPSByZXF1aXJlKCdyZWFjdC1yZWxheScpXG5cblxuZXhwb3J0IGludGVyZmFjZSBTdGF0c0NoYXJ0UHJvcHMge1xuXHRzbmFwc2hvdHM6IHtcblx0XHR2aWV3czogc3RyaW5nLFxuXHRcdGxpa2VzOiBzdHJpbmcsXG5cdFx0ZGlzbGlrZXM6IHN0cmluZyxcblx0XHRmYXZvcml0ZXM6IHN0cmluZyxcblx0XHRjb21tZW50czogc3RyaW5nLFxuXHR9W11cbn1cblxuaW50ZXJmYWNlIFByb3BzIGV4dGVuZHMgU3RhdHNDaGFydFByb3BzIHtcblx0c2NhbGU6IG51bWJlcixcblx0ZGF0YVBvaW50Q291bnQ6IG51bWJlcixcbn1cblxuY29uc3QgQ0hBUlRfT1BUUzogQ2hhcnRPcHRpb25zID0ge1xuXHRyZXNwb25zaXZlOiB0cnVlLFxuXHRsZWdlbmQ6IHsgZGlzcGxheTogZmFsc2UgfSxcblx0c2NhbGVzOiB7XG5cdFx0eEF4ZXM6IFt7XG5cdFx0XHRkaXNwbGF5OiBmYWxzZSxcblx0XHRcdGdyaWRMaW5lczogeyBkaXNwbGF5OiBmYWxzZSB9LFxuXHRcdH1dLFxuXHRcdHlBeGVzOiBbe1xuXHRcdFx0ZGlzcGxheTogZmFsc2UsXG5cdFx0XHRzdGFja2VkOiB0cnVlLFxuXHRcdFx0dGlja3M6IHsgZGlzcGxheTogZmFsc2UgfSxcblx0XHRcdGdyaWRMaW5lczogeyBkaXNwbGF5OiBmYWxzZSB9LFxuXHRcdH1dLFxuXHRcdGdyaWRMaW5lczogeyBkaXNwbGF5OiBmYWxzZSB9LFxuXHR9LFxufVxuXG5jbGFzcyBTdGF0c0NoYXJ0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLCBhbnk+IHtcblxuXHRyZW5kZXIoKSB7XG5cdFx0Y29uc3QgeyBkYXRhIH0gPSB0aGlzXG5cblx0XHRjb25zdCB0b3RhbHMgID0gZGF0YS5kYXRhc2V0cyEucmVkdWNlKChhY2NsOiBudW1iZXJbXSwgeyBkYXRhIH0pID0+IHtcblx0XHRcdChkYXRhIGFzIG51bWJlcltdKS5mb3JFYWNoKCh2YWx1ZSwgaW5kZXgpID0+IHtcblx0XHRcdFx0YWNjbFtpbmRleF0gPSAoYWNjbFtpbmRleF0gfHwgMCkgKyB2YWx1ZVxuXHRcdFx0fSlcblx0XHRcdHJldHVybiBhY2NsXG5cdFx0fSwgW10pXG5cblx0XHRjb25zdCBtaW4gPSBNYXRoLm1pbiguLi50b3RhbHMpXG5cdFx0ICBsZXQgbWF4ID0gTWF0aC5tYXgoLi4udG90YWxzKVxuXG5cdFx0Ly8gUHJldmVudCBzbWFsbCBjaGFuZ2VzIGFwcGVhcmluZyB0aGUgc2FtZSBhcyBiaWcgY2hhbmdlcy5cblx0XHRjb25zdCB7IHNjYWxlIH0gPSB0aGlzLnByb3BzXG5cdFx0aWYgKG1heCA8IHNjYWxlKm1pbilcblx0XHRcdG1heCA9IChzY2FsZSptaW4pXG5cblx0XHRjb25zdCB5QXhlcyA9IENIQVJUX09QVFMuc2NhbGVzIS55QXhlcyEubWFwKGF4aXMgPT4ge1xuXHRcdFx0cmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGF4aXMsIHtcblx0XHRcdFx0dGlja3M6IHtcblx0XHRcdFx0XHRtaW4sIG1heCxcblx0XHRcdFx0XHRiZWdpbkF0WmVybzogZmFsc2UsXG5cdFx0XHRcdH0sXG5cdFx0XHR9KVxuXHRcdH0pXG5cblx0XHRjb25zdCBzY2FsZXMgPSBPYmplY3QuYXNzaWduKHt9LCBDSEFSVF9PUFRTLnNjYWxlcywge1xuXHRcdFx0eUF4ZXMsXG5cdFx0fSlcblxuXHRcdGNvbnN0IG9wdHMgPSBPYmplY3QuYXNzaWduKHt9LCBDSEFSVF9PUFRTLCB7IHNjYWxlcyB9KVxuXG5cdFx0cmV0dXJuIChcblx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiY2hhcnQtYm94XCI+XG5cdFx0XHRcdDxMaW5lIGRhdGE9e2RhdGF9IG9wdGlvbnM9e29wdHN9IC8+XG5cdFx0XHQ8L2Rpdj5cblx0XHQpXG5cdH1cblxuXHRwcml2YXRlIGdldCBkYXRhKCk6IENoYXJ0RGF0YSB7XG5cdFx0Y29uc3QgbGFiZWxzOiBzdHJpbmdbXSA9IChuZXcgQXJyYXkodGhpcy5wcm9wcy5kYXRhUG9pbnRDb3VudClcblx0XHRcdC5tYXAoKF8sIGluZGV4KSA9PiBgJHtpbmRleH1gKSlcblxuXHRcdGxldCBkYXRhc2V0czogQ2hhcnREYXRhU2V0c1tdID0gW1xuXHRcdFx0eyBsYWJlbDogJ3ZpZXdzJywgICAgIGJvcmRlckNvbG9yOiAnIzc3NycsIH0sXG5cdFx0XHR7IGxhYmVsOiAnZGlzbGlrZXMnLCAgYm9yZGVyQ29sb3I6ICcjOTk5JywgfSxcblx0XHRcdHsgbGFiZWw6ICdsaWtlcycsICAgICBib3JkZXJDb2xvcjogJyNiYmInLCB9LFxuXHRcdFx0eyBsYWJlbDogJ2NvbW1lbnRzJywgIGJvcmRlckNvbG9yOiAnIzU1NScsIH0sXG5cdFx0XHR7IGxhYmVsOiAnZmF2b3JpdGVzJywgYm9yZGVyQ29sb3I6ICcjMzMzJywgfSxcblx0XHRdXG5cblx0XHRkYXRhc2V0cyA9IGRhdGFzZXRzLm1hcChkYXRhc2V0ID0+IHtcblx0XHRcdGRhdGFzZXQuYmFja2dyb3VuZENvbG9yID0gZGF0YXNldC5iYWNrZ3JvdW5kQ29sb3IgfHwgZGF0YXNldC5ib3JkZXJDb2xvclxuXHRcdFx0ZGF0YXNldC5kYXRhID0gW11cblx0XHRcdGRhdGFzZXQucG9pbnRSYWRpdXMgPSAxXG5cblx0XHRcdHJldHVybiBkYXRhc2V0XG5cdFx0fSlcblxuXHRcdHRoaXMucHJvcHMuc25hcHNob3RzLmZvckVhY2goc25hcHNob3QgPT4ge1xuXHRcdFx0ZGF0YXNldHMuZm9yRWFjaCgoeyBsYWJlbD0nW0VSUk9SXScsIGRhdGE9W10gfSkgPT4ge1xuXHRcdFx0XHQoZGF0YSBhcyBudW1iZXJbXSkucHVzaChOdW1iZXIoc25hcHNob3RbbGFiZWxdKSlcblx0XHRcdH0pXG5cdFx0fSlcblxuXHRcdGNvbnN0IG1heENvdW50ID0gMVxuXG5cdFx0cmV0dXJuIHsgbGFiZWxzLCBkYXRhc2V0cyB9XG5cdH1cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVGcmFnbWVudENvbnRhaW5lcihTdGF0c0NoYXJ0LCBncmFwaHFsYFxuXHRmcmFnbWVudCBTdGF0c0NoYXJ0X3NuYXBzaG90cyBvbiBWaWRlb1N0YXRzIEByZWxheShwbHVyYWw6IHRydWUpIHtcblx0XHR2aWV3c1xuXHRcdGxpa2VzXG5cdFx0ZGlzbGlrZXNcblx0XHRmYXZvcml0ZXNcblx0XHRjb21tZW50c1xuXHR9XG5gKVxuIl19