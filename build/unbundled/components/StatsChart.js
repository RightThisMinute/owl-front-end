"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const react_chartjs_2_1 = require("react-chartjs-2");
const { createFragmentContainer, graphql } = require('react-relay');
const CHART_OPTS = {
    responsive: true,
    legend: { display: false },
    scales: {
        xAxes: [{
                display: false,
                gridLines: { display: false },
            }],
        yAxes: [{
                display: false,
                stacked: true,
                ticks: { display: false },
                gridLines: { display: false },
            }],
        gridLines: { display: false },
    },
};
class StatsChart extends React.Component {
    render() {
        const { data } = this;
        const totals = data.datasets.reduce((accl, { data }) => {
            data.forEach((value, index) => {
                accl[index] = (accl[index] || 0) + value;
            });
            return accl;
        }, []);
        const min = Math.min(...totals);
        let max = Math.max(...totals);
        // Prevent small changes appearing the same as big changes.
        if (max < this.props.scale * min)
            max = (this.props.scale * min);
        const yAxes = CHART_OPTS.scales.yAxes.map(axis => {
            return Object.assign({}, axis, {
                ticks: {
                    min, max,
                    beginAtZero: false,
                },
            });
        });
        const scales = Object.assign({}, CHART_OPTS.scales, {
            yAxes,
        });
        const opts = Object.assign({}, CHART_OPTS, { scales });
        return (React.createElement("div", { className: "chart-box" },
            React.createElement(react_chartjs_2_1.Line, { data: data, options: opts })));
    }
    get data() {
        const labels = [];
        let datasets = [
            { label: 'views', borderColor: '#bbb', },
            { label: 'dislikes', borderColor: '#999', },
            { label: 'likes', borderColor: '#777', },
            { label: 'comments', borderColor: '#555', },
            { label: 'favorites', borderColor: '#333', },
        ];
        datasets = datasets.map(dataset => {
            dataset.backgroundColor = dataset.borderColor;
            dataset.data = [];
            dataset.pointRadius = 0;
            return dataset;
        });
        let count = 0;
        this.props.snapshots.forEach(snapshot => {
            labels.push(`${count++}`);
            datasets.forEach(({ label = '[ERROR]', data = [] }) => {
                data.push(Number(snapshot[label]));
            });
        });
        const maxCount = 1;
        return { labels, datasets };
    }
}
exports.default = createFragmentContainer(StatsChart, graphql `
	fragment StatsChart_snapshots on VideoStats @relay(plural: true) {
		views
		likes
		dislikes
		favorites
		comments
	}
`);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RhdHNDaGFydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1N0YXRzQ2hhcnQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsK0JBQThCO0FBRTlCLHFEQUFzQztBQUV0QyxNQUFNLEVBQUUsdUJBQXVCLEVBQUUsT0FBTyxFQUFFLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFBO0FBaUJuRSxNQUFNLFVBQVUsR0FBaUI7SUFDaEMsVUFBVSxFQUFFLElBQUk7SUFDaEIsTUFBTSxFQUFFLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRTtJQUMxQixNQUFNLEVBQUU7UUFDUCxLQUFLLEVBQUUsQ0FBQztnQkFDUCxPQUFPLEVBQUUsS0FBSztnQkFDZCxTQUFTLEVBQUUsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFO2FBQzdCLENBQUM7UUFDRixLQUFLLEVBQUUsQ0FBQztnQkFDUCxPQUFPLEVBQUUsS0FBSztnQkFDZCxPQUFPLEVBQUUsSUFBSTtnQkFDYixLQUFLLEVBQUUsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFO2dCQUN6QixTQUFTLEVBQUUsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFO2FBQzdCLENBQUM7UUFDRixTQUFTLEVBQUUsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFO0tBQzdCO0NBQ0QsQ0FBQTtBQUVELGdCQUFpQixTQUFRLEtBQUssQ0FBQyxTQUFxQjtJQUVuRCxNQUFNO1FBQ0wsTUFBTSxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQTtRQUVyQixNQUFNLE1BQU0sR0FBSSxJQUFJLENBQUMsUUFBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQWMsRUFBRSxFQUFFLElBQUksRUFBRTtZQUM3RCxJQUFpQixDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxLQUFLO2dCQUN2QyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElB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QUE7UUFFbEIsTUFBTSxDQUFDLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxDQUFBO0lBQzVCLENBQUM7Q0FDRDtBQUdELGtCQUFlLHVCQUF1QixDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUE7Ozs7Ozs7O0NBUXpELENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBDaGFydERhdGEsIENoYXJ0RGF0YVNldHMsIENoYXJ0T3B0aW9ucyB9IGZyb20gJ2NoYXJ0LmpzJ1xuaW1wb3J0IHsgTGluZSB9IGZyb20gJ3JlYWN0LWNoYXJ0anMtMidcblxuY29uc3QgeyBjcmVhdGVGcmFnbWVudENvbnRhaW5lciwgZ3JhcGhxbCB9ID0gcmVxdWlyZSgncmVhY3QtcmVsYXknKVxuXG5cbmV4cG9ydCBpbnRlcmZhY2UgU3RhdHNDaGFydFByb3BzIHtcblx0c25hcHNob3RzOiB7XG5cdFx0dmlld3M6IHN0cmluZyxcblx0XHRsaWtlczogc3RyaW5nLFxuXHRcdGRpc2xpa2VzOiBzdHJpbmcsXG5cdFx0ZmF2b3JpdGVzOiBzdHJpbmcsXG5cdFx0Y29tbWVudHM6IHN0cmluZyxcblx0fVtdXG59XG5cbmludGVyZmFjZSBQcm9wcyBleHRlbmRzIFN0YXRzQ2hhcnRQcm9wcyB7XG5cdHNjYWxlOiBudW1iZXJcbn1cblxuY29uc3QgQ0hBUlRfT1BUUzogQ2hhcnRPcHRpb25zID0ge1xuXHRyZXNwb25zaXZlOiB0cnVlLFxuXHRsZWdlbmQ6IHsgZGlzcGxheTogZmFsc2UgfSxcblx0c2NhbGVzOiB7XG5cdFx0eEF4ZXM6IFt7XG5cdFx0XHRkaXNwbGF5OiBmYWxzZSxcblx0XHRcdGdyaWRMaW5lczogeyBkaXNwbGF5OiBmYWxzZSB9LFxuXHRcdH1dLFxuXHRcdHlBeGVzOiBbe1xuXHRcdFx0ZGlzcGxheTogZmFsc2UsXG5cdFx0XHRzdGFja2VkOiB0cnVlLFxuXHRcdFx0dGlja3M6IHsgZGlzcGxheTogZmFsc2UgfSxcblx0XHRcdGdyaWRMaW5lczogeyBkaXNwbGF5OiBmYWxzZSB9LFxuXHRcdH1dLFxuXHRcdGdyaWRMaW5lczogeyBkaXNwbGF5OiBmYWxzZSB9LFxuXHR9LFxufVxuXG5jbGFzcyBTdGF0c0NoYXJ0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLCBhbnk+IHtcblxuXHRyZW5kZXIoKSB7XG5cdFx0Y29uc3QgeyBkYXRhIH0gPSB0aGlzXG5cblx0XHRjb25zdCB0b3RhbHMgID0gZGF0YS5kYXRhc2V0cyEucmVkdWNlKChhY2NsOiBudW1iZXJbXSwgeyBkYXRhIH0pID0+IHtcblx0XHRcdChkYXRhIGFzIG51bWJlcltdKS5mb3JFYWNoKCh2YWx1ZSwgaW5kZXgpID0+IHtcblx0XHRcdFx0YWNjbFtpbmRleF0gPSAoYWNjbFtpbmRleF0gfHwgMCkgKyB2YWx1ZVxuXHRcdFx0fSlcblx0XHRcdHJldHVybiBhY2NsXG5cdFx0fSwgW10pXG5cblx0XHRjb25zdCBtaW4gPSBNYXRoLm1pbiguLi50b3RhbHMpXG5cdFx0ICBsZXQgbWF4ID0gTWF0aC5tYXgoLi4udG90YWxzKVxuXG5cdFx0Ly8gUHJldmVudCBzbWFsbCBjaGFuZ2VzIGFwcGVhcmluZyB0aGUgc2FtZSBhcyBiaWcgY2hhbmdlcy5cblx0XHRpZiAobWF4IDwgdGhpcy5wcm9wcy5zY2FsZSptaW4pXG5cdFx0XHRtYXggPSAodGhpcy5wcm9wcy5zY2FsZSptaW4pXG5cblx0XHRjb25zdCB5QXhlcyA9IENIQVJUX09QVFMuc2NhbGVzIS55QXhlcyEubWFwKGF4aXMgPT4ge1xuXHRcdFx0cmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIGF4aXMsIHtcblx0XHRcdFx0dGlja3M6IHtcblx0XHRcdFx0XHRtaW4sIG1heCxcblx0XHRcdFx0XHRiZWdpbkF0WmVybzogZmFsc2UsXG5cdFx0XHRcdH0sXG5cdFx0XHR9KVxuXHRcdH0pXG5cblx0XHRjb25zdCBzY2FsZXMgPSBPYmplY3QuYXNzaWduKHt9LCBDSEFSVF9PUFRTLnNjYWxlcywge1xuXHRcdFx0eUF4ZXMsXG5cdFx0fSlcblxuXHRcdGNvbnN0IG9wdHMgPSBPYmplY3QuYXNzaWduKHt9LCBDSEFSVF9PUFRTLCB7IHNjYWxlcyB9KVxuXG5cdFx0cmV0dXJuIChcblx0XHRcdDxkaXYgY2xhc3NOYW1lPVwiY2hhcnQtYm94XCI+XG5cdFx0XHRcdDxMaW5lIGRhdGE9e2RhdGF9IG9wdGlvbnM9e29wdHN9IC8+XG5cdFx0XHQ8L2Rpdj5cblx0XHQpXG5cdH1cblxuXHRwcml2YXRlIGdldCBkYXRhKCk6IENoYXJ0RGF0YSB7XG5cdFx0Y29uc3QgbGFiZWxzOiBzdHJpbmdbXSA9IFtdXG5cblx0XHRsZXQgZGF0YXNldHM6IENoYXJ0RGF0YVNldHNbXSA9IFtcblx0XHRcdHsgbGFiZWw6ICd2aWV3cycsICAgICBib3JkZXJDb2xvcjogJyNiYmInLCB9LFxuXHRcdFx0eyBsYWJlbDogJ2Rpc2xpa2VzJywgIGJvcmRlckNvbG9yOiAnIzk5OScsIH0sXG5cdFx0XHR7IGxhYmVsOiAnbGlrZXMnLCAgICAgYm9yZGVyQ29sb3I6ICcjNzc3JywgfSxcblx0XHRcdHsgbGFiZWw6ICdjb21tZW50cycsICBib3JkZXJDb2xvcjogJyM1NTUnLCB9LFxuXHRcdFx0eyBsYWJlbDogJ2Zhdm9yaXRlcycsIGJvcmRlckNvbG9yOiAnIzMzMycsIH0sXG5cdFx0XVxuXG5cdFx0ZGF0YXNldHMgPSBkYXRhc2V0cy5tYXAoZGF0YXNldCA9PiB7XG5cdFx0XHRkYXRhc2V0LmJhY2tncm91bmRDb2xvciA9IGRhdGFzZXQuYm9yZGVyQ29sb3Jcblx0XHRcdGRhdGFzZXQuZGF0YSA9IFtdXG5cdFx0XHRkYXRhc2V0LnBvaW50UmFkaXVzID0gMFxuXG5cdFx0XHRyZXR1cm4gZGF0YXNldFxuXHRcdH0pXG5cblx0XHRsZXQgY291bnQgPSAwXG5cblx0XHR0aGlzLnByb3BzLnNuYXBzaG90cy5mb3JFYWNoKHNuYXBzaG90ID0+IHtcblx0XHRcdGxhYmVscy5wdXNoKGAke2NvdW50Kyt9YClcblx0XHRcdFxuXHRcdFx0ZGF0YXNldHMuZm9yRWFjaCgoeyBsYWJlbD0nW0VSUk9SXScsIGRhdGE9W10gfSkgPT4ge1xuXHRcdFx0XHQoZGF0YSBhcyBudW1iZXJbXSkucHVzaChOdW1iZXIoc25hcHNob3RbbGFiZWxdKSlcblx0XHRcdH0pXG5cdFx0fSlcblxuXHRcdGNvbnN0IG1heENvdW50ID0gMVxuXG5cdFx0cmV0dXJuIHsgbGFiZWxzLCBkYXRhc2V0cyB9XG5cdH1cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVGcmFnbWVudENvbnRhaW5lcihTdGF0c0NoYXJ0LCBncmFwaHFsYFxuXHRmcmFnbWVudCBTdGF0c0NoYXJ0X3NuYXBzaG90cyBvbiBWaWRlb1N0YXRzIEByZWxheShwbHVyYWw6IHRydWUpIHtcblx0XHR2aWV3c1xuXHRcdGxpa2VzXG5cdFx0ZGlzbGlrZXNcblx0XHRmYXZvcml0ZXNcblx0XHRjb21tZW50c1xuXHR9XG5gKVxuIl19