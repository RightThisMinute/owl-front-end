"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const react_chartjs_2_1 = require("react-chartjs-2");
const { createFragmentContainer, graphql } = require('react-relay');
const CHART_OPTS = {
    responsive: true,
    legend: { display: false },
    scales: {
        xAxes: [{
                display: false,
                gridLines: { display: false },
            }],
        yAxes: [{
                display: false,
                stacked: true,
                ticks: { display: false },
                gridLines: { display: false },
            }],
        gridLines: { display: false },
    },
};
class StatsChart extends React.Component {
    render() {
        const { data } = this;
        const totals = data.datasets.reduce((accl, { data }) => {
            data.forEach((value, index) => {
                accl[index] = (accl[index] || 0) + value;
            });
            return accl;
        }, []);
        const min = Math.min(...totals);
        let max = Math.max(...totals);
        // Prevent small changes appearing the same as big changes.
        if (max < 2 * min)
            max = (2 * min);
        const yAxes = CHART_OPTS.scales.yAxes.map(axis => {
            return Object.assign({}, axis, {
                ticks: {
                    min, max,
                    beginAtZero: false,
                },
            });
        });
        const scales = Object.assign({}, CHART_OPTS.scales, {
            yAxes,
        });
        const opts = Object.assign({}, CHART_OPTS, { scales });
        return (React.createElement("div", { className: "chart-box" },
            React.createElement(react_chartjs_2_1.Line, { data: data, options: opts })));
    }
    get data() {
        const labels = [];
        let datasets = [
            { label: 'views', borderColor: '#bbb', },
            { label: 'dislikes', borderColor: '#999', },
            { label: 'likes', borderColor: '#777', },
            { label: 'comments', borderColor: '#555', },
            { label: 'favorites', borderColor: '#333', },
        ];
        datasets = datasets.map(dataset => {
            dataset.backgroundColor = dataset.borderColor;
            dataset.data = [];
            dataset.pointRadius = 0;
            return dataset;
        });
        let count = 0;
        this.props.snapshots.forEach(snapshot => {
            labels.push(`${count++}`);
            datasets.forEach(({ label = '[ERROR]', data = [] }) => {
                data.push(Number(snapshot[label]));
            });
        });
        const maxCount = 1;
        return { labels, datasets };
    }
}
exports.default = createFragmentContainer(StatsChart, graphql `
	fragment StatsChart_snapshots on VideoStats @relay(plural: true) {
		views
		likes
		dislikes
		favorites
		comments
	}
`);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RhdHNDaGFydC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1N0YXRzQ2hhcnQudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsK0JBQThCO0FBRTlCLHFEQUFzQztBQUV0QyxNQUFNLEVBQUUsdUJBQXVCLEVBQUUsT0FBTyxFQUFFLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFBO0FBYW5FLE1BQU0sVUFBVSxHQUFpQjtJQUNoQyxVQUFVLEVBQUUsSUFBSTtJQUNoQixNQUFNLEVBQUUsRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFO0lBQzFCLE1BQU0sRUFBRTtRQUNQLEtBQUssRUFBRSxDQUFDO2dCQUNQLE9BQU8sRUFBRSxLQUFLO2dCQUNkLFNBQVMsRUFBRSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUU7YUFDN0IsQ0FBQztRQUNGLEtBQUssRUFBRSxDQUFDO2dCQUNQLE9BQU8sRUFBRSxLQUFLO2dCQUNkLE9BQU8sRUFBRSxJQUFJO2dCQUNiLEtBQUssRUFBRSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUU7Z0JBQ3pCLFNBQVMsRUFBRSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUU7YUFDN0IsQ0FBQztRQUNGLFNBQVMsRUFBRSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUU7S0FDN0I7Q0FDRCxDQUFBO0FBRUQsZ0JBQWlCLFNBQVEsS0FBSyxDQUFDLFNBQStCO0lBRTdELE1BQU07UUFDTCxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFBO1FBRXJCLE1BQU0sTUFBTSxHQUFJLElBQUksQ0FBQyxRQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBYyxFQUFFLEVBQUUsSUFBSSxFQUFFO1lBQzdELElBQWlCLENBQUMsT0FBTyxDQUFDLENBQUMsS0FBSyxFQUFFLEtBQUs7Z0JBQ3ZDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLENBQUE7WUFDekMsQ0FBQyxDQUFDLENBQUE7WUFDRixNQUFNLENBQUMsSUFBSSxDQUFBO1FBQ1osQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO1FBRU4sTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFBO1FBQzdCLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQTtRQUUvQiwyREFBMkQ7UUFDM0QsRUFBRSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBQyxHQUFHLENBQUM7WUFDZixHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUMsR0FBRyxDQUFDLENBQUE7UUFFZCxNQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsTUFBTyxDQUFDLEtBQU0sQ0FBQyxHQUFHLENBQUMsSUFBSTtZQUMvQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFO2dCQUM5QixLQUFLLEVBQUU7b0JBQ04sR0FBRyxFQUFFLEdBQUc7b0JBQ1IsV0FBVyxFQUFFLEtBQUs7aUJBQ2xCO2FBQ0QsQ0FBQyxDQUFBO1FBQ0gsQ0FBQyxDQUFDLENBQUE7UUFFRixNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxVQUFVLENBQUMsTUFBTSxFQUFFO1lBQ25ELEtBQUs7U0FDTCxDQUFDLENBQUE7UUFFRixNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxVQUFVLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFBO1FBRXRELE1BQU0sQ0FBQyxDQUNOLDZCQUFLLFNBQVMsRUFBQyxXQUFXO1lBQ3pCLG9CQUFDLHNCQUFJLElBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxHQUFJLENBQzlCLENBQ04sQ0FBQTtJQUNGLENBQUM7SUFFRCxJQUFZLElBQUk7UUFDZixNQUFNLE1BQU0sR0FBYSxFQUFFLENBQUE7UUFFM0IsSUFBSSxRQUFRLEdBQW9CO1lBQy9CLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBTSxXQUFXLEVBQUUsTUFBTSxHQUFHO1lBQzVDLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRyxXQUFXLEVBQUUsTUFBTSxHQUFHO1lBQzVDLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBTSxXQUFXLEVBQUUsTUFBTSxHQUFHO1lBQzVDLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRyxXQUFXLEVBQUUsTUFBTSxHQUFHO1lBQzVDLEVBQUUsS0FBSyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsTUFBTSxHQUFHO1NBQzVDLENBQUE7UUFFRCxRQUFRLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxPQUFPO1lBQzlCLE9BQU8sQ0FBQyxlQUFlLEdBQUcsT0FBTyxDQUFDLFdBQVcsQ0FBQTtZQUM3QyxPQUFPLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQTtZQUNqQixPQUFPLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQTtZQUV2QixNQUFNLENBQUMsT0FBTyxDQUFBO1FBQ2YsQ0FBQyxDQUFDLENBQUE7UUFFRixJQUFJLEtBQUssR0FBRyxDQUFDLENBQUE7UUFFYixJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUTtZQUNwQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFBO1lBRXpCLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFLEtBQUssR0FBQyxTQUFTLEVBQUUsSUFBSSxHQUFDLEVBQUUsRUFBRTtnQkFDNUMsSUFBaUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDakQsQ0FBQyxDQUFDLENBQUE7UUFDSCxDQUFDLENBQUMsQ0FBQTtRQUVGLE1BQU0sUUFBUSxHQUFHLENBQUMsQ0FBQTtRQUVsQixNQUFNLENBQUMsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLENBQUE7SUFDNUIsQ0FBQztDQUNEO0FBR0Qsa0JBQWUsdUJBQXVCLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQTs7Ozs7Ozs7Q0FRekQsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IENoYXJ0RGF0YSwgQ2hhcnREYXRhU2V0cywgQ2hhcnRPcHRpb25zIH0gZnJvbSAnY2hhcnQuanMnXG5pbXBvcnQgeyBMaW5lIH0gZnJvbSAncmVhY3QtY2hhcnRqcy0yJ1xuXG5jb25zdCB7IGNyZWF0ZUZyYWdtZW50Q29udGFpbmVyLCBncmFwaHFsIH0gPSByZXF1aXJlKCdyZWFjdC1yZWxheScpXG5cblxuZXhwb3J0IGludGVyZmFjZSBTdGF0c0NoYXJ0UHJvcHMge1xuXHRzbmFwc2hvdHM6IHtcblx0XHR2aWV3czogc3RyaW5nLFxuXHRcdGxpa2VzOiBzdHJpbmcsXG5cdFx0ZGlzbGlrZXM6IHN0cmluZyxcblx0XHRmYXZvcml0ZXM6IHN0cmluZyxcblx0XHRjb21tZW50czogc3RyaW5nLFxuXHR9W11cbn1cblxuY29uc3QgQ0hBUlRfT1BUUzogQ2hhcnRPcHRpb25zID0ge1xuXHRyZXNwb25zaXZlOiB0cnVlLFxuXHRsZWdlbmQ6IHsgZGlzcGxheTogZmFsc2UgfSxcblx0c2NhbGVzOiB7XG5cdFx0eEF4ZXM6IFt7XG5cdFx0XHRkaXNwbGF5OiBmYWxzZSxcblx0XHRcdGdyaWRMaW5lczogeyBkaXNwbGF5OiBmYWxzZSB9LFxuXHRcdH1dLFxuXHRcdHlBeGVzOiBbe1xuXHRcdFx0ZGlzcGxheTogZmFsc2UsXG5cdFx0XHRzdGFja2VkOiB0cnVlLFxuXHRcdFx0dGlja3M6IHsgZGlzcGxheTogZmFsc2UgfSxcblx0XHRcdGdyaWRMaW5lczogeyBkaXNwbGF5OiBmYWxzZSB9LFxuXHRcdH1dLFxuXHRcdGdyaWRMaW5lczogeyBkaXNwbGF5OiBmYWxzZSB9LFxuXHR9LFxufVxuXG5jbGFzcyBTdGF0c0NoYXJ0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFN0YXRzQ2hhcnRQcm9wcywgYW55PiB7XG5cblx0cmVuZGVyKCkge1xuXHRcdGNvbnN0IHsgZGF0YSB9ID0gdGhpc1xuXG5cdFx0Y29uc3QgdG90YWxzICA9IGRhdGEuZGF0YXNldHMhLnJlZHVjZSgoYWNjbDogbnVtYmVyW10sIHsgZGF0YSB9KSA9PiB7XG5cdFx0XHQoZGF0YSBhcyBudW1iZXJbXSkuZm9yRWFjaCgodmFsdWUsIGluZGV4KSA9PiB7XG5cdFx0XHRcdGFjY2xbaW5kZXhdID0gKGFjY2xbaW5kZXhdIHx8IDApICsgdmFsdWVcblx0XHRcdH0pXG5cdFx0XHRyZXR1cm4gYWNjbFxuXHRcdH0sIFtdKVxuXG5cdFx0Y29uc3QgbWluID0gTWF0aC5taW4oLi4udG90YWxzKVxuXHRcdCAgbGV0IG1heCA9IE1hdGgubWF4KC4uLnRvdGFscylcblxuXHRcdC8vIFByZXZlbnQgc21hbGwgY2hhbmdlcyBhcHBlYXJpbmcgdGhlIHNhbWUgYXMgYmlnIGNoYW5nZXMuXG5cdFx0aWYgKG1heCA8IDIqbWluKVxuXHRcdFx0bWF4ID0gKDIqbWluKVxuXG5cdFx0Y29uc3QgeUF4ZXMgPSBDSEFSVF9PUFRTLnNjYWxlcyEueUF4ZXMhLm1hcChheGlzID0+IHtcblx0XHRcdHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBheGlzLCB7XG5cdFx0XHRcdHRpY2tzOiB7XG5cdFx0XHRcdFx0bWluLCBtYXgsXG5cdFx0XHRcdFx0YmVnaW5BdFplcm86IGZhbHNlLFxuXHRcdFx0XHR9LFxuXHRcdFx0fSlcblx0XHR9KVxuXG5cdFx0Y29uc3Qgc2NhbGVzID0gT2JqZWN0LmFzc2lnbih7fSwgQ0hBUlRfT1BUUy5zY2FsZXMsIHtcblx0XHRcdHlBeGVzLFxuXHRcdH0pXG5cblx0XHRjb25zdCBvcHRzID0gT2JqZWN0LmFzc2lnbih7fSwgQ0hBUlRfT1BUUywgeyBzY2FsZXMgfSlcblxuXHRcdHJldHVybiAoXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cImNoYXJ0LWJveFwiPlxuXHRcdFx0XHQ8TGluZSBkYXRhPXtkYXRhfSBvcHRpb25zPXtvcHRzfSAvPlxuXHRcdFx0PC9kaXY+XG5cdFx0KVxuXHR9XG5cblx0cHJpdmF0ZSBnZXQgZGF0YSgpOiBDaGFydERhdGEge1xuXHRcdGNvbnN0IGxhYmVsczogc3RyaW5nW10gPSBbXVxuXG5cdFx0bGV0IGRhdGFzZXRzOiBDaGFydERhdGFTZXRzW10gPSBbXG5cdFx0XHR7IGxhYmVsOiAndmlld3MnLCAgICAgYm9yZGVyQ29sb3I6ICcjYmJiJywgfSxcblx0XHRcdHsgbGFiZWw6ICdkaXNsaWtlcycsICBib3JkZXJDb2xvcjogJyM5OTknLCB9LFxuXHRcdFx0eyBsYWJlbDogJ2xpa2VzJywgICAgIGJvcmRlckNvbG9yOiAnIzc3NycsIH0sXG5cdFx0XHR7IGxhYmVsOiAnY29tbWVudHMnLCAgYm9yZGVyQ29sb3I6ICcjNTU1JywgfSxcblx0XHRcdHsgbGFiZWw6ICdmYXZvcml0ZXMnLCBib3JkZXJDb2xvcjogJyMzMzMnLCB9LFxuXHRcdF1cblxuXHRcdGRhdGFzZXRzID0gZGF0YXNldHMubWFwKGRhdGFzZXQgPT4ge1xuXHRcdFx0ZGF0YXNldC5iYWNrZ3JvdW5kQ29sb3IgPSBkYXRhc2V0LmJvcmRlckNvbG9yXG5cdFx0XHRkYXRhc2V0LmRhdGEgPSBbXVxuXHRcdFx0ZGF0YXNldC5wb2ludFJhZGl1cyA9IDBcblxuXHRcdFx0cmV0dXJuIGRhdGFzZXRcblx0XHR9KVxuXG5cdFx0bGV0IGNvdW50ID0gMFxuXG5cdFx0dGhpcy5wcm9wcy5zbmFwc2hvdHMuZm9yRWFjaChzbmFwc2hvdCA9PiB7XG5cdFx0XHRsYWJlbHMucHVzaChgJHtjb3VudCsrfWApXG5cdFx0XHRcblx0XHRcdGRhdGFzZXRzLmZvckVhY2goKHsgbGFiZWw9J1tFUlJPUl0nLCBkYXRhPVtdIH0pID0+IHtcblx0XHRcdFx0KGRhdGEgYXMgbnVtYmVyW10pLnB1c2goTnVtYmVyKHNuYXBzaG90W2xhYmVsXSkpXG5cdFx0XHR9KVxuXHRcdH0pXG5cblx0XHRjb25zdCBtYXhDb3VudCA9IDFcblxuXHRcdHJldHVybiB7IGxhYmVscywgZGF0YXNldHMgfVxuXHR9XG59XG5cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlRnJhZ21lbnRDb250YWluZXIoU3RhdHNDaGFydCwgZ3JhcGhxbGBcblx0ZnJhZ21lbnQgU3RhdHNDaGFydF9zbmFwc2hvdHMgb24gVmlkZW9TdGF0cyBAcmVsYXkocGx1cmFsOiB0cnVlKSB7XG5cdFx0dmlld3Ncblx0XHRsaWtlc1xuXHRcdGRpc2xpa2VzXG5cdFx0ZmF2b3JpdGVzXG5cdFx0Y29tbWVudHNcblx0fVxuYClcbiJdfQ==