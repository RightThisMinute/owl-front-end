"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
// Typescript wont let us just grab individual lodash modules using a
// normal `import first from 'lodash/first'` statement, but this works
// to avoid bloat.
const first = require("lodash/first");
const find = require("lodash/find");
const last = require("lodash/last");
const { createFragmentContainer, graphql } = require('react-relay');
class StatsChange extends React.Component {
    render() {
        const start = first(this.props.snapshots);
        const end = last(this.props.snapshots);
        const startCount = start != null
            ? [start.views, start.likes, start.dislikes, start.favorites,
                start.comments]
                .map(Number).reduce((sum, num) => sum + num, 0)
            : 0;
        const endCount = end != null
            ? [end.views, end.likes, end.dislikes, end.favorites, end.comments]
                .map(Number).reduce((sum, num) => sum + num, 0)
            : 0;
        const change = endCount - startCount;
        const percent = Math.round((endCount / startCount * 100) - 100) || 0;
        const diff = Math.abs(change);
        const sign = change > 0 ? '+' : change < 0 ? '-' : '';
        const signClass = change > 0 ? 'positive' : change < 0 ? 'negative' : 'none';
        const s = suffixNumber;
        const f = formatNumber;
        const className = `stats-change ${signClass}`;
        return (React.createElement("div", { className: className },
            React.createElement("span", { className: "start-end" },
                React.createElement("span", { className: "start" }, s(startCount)),
                React.createElement("span", { className: "separator" }, "\u25BA"),
                React.createElement("span", { className: "end" }, s(endCount))),
            React.createElement("span", { className: "diff" },
                React.createElement("span", { className: "sign" }, sign),
                React.createElement("span", { className: "count" }, s(diff)),
                React.createElement("span", { className: "separator" }, "/"),
                React.createElement("span", { className: "percent" },
                    React.createElement("em", null, f(percent)),
                    "%"))));
    }
}
function formatNumber(number) {
    if (Math.abs(number) >= 10)
        return Math.round(number)
            .toString().split('').reverse()
            .map((num, nx) => (nx + 1) % 3 === 0 ? ',' + num : num)
            .reverse().join('').replace(/^,/, '');
    const [whole, partial = null] = number.toString().split('.');
    if (partial === null)
        return whole;
    const decimal = Math.floor(Number(partial) / (Math.pow(10, (partial.length - 1)))).toString();
    return whole + '.' + decimal;
}
function suffixNumber(number) {
    const suffixes = [
        ['K', 1000], ['M', 1000000], ['B', 1000000000], ['T', 1000000000000]
    ].reverse();
    const [suffix = '', divisor = 1] = find(suffixes, ([_, divisor]) => {
        return (number / divisor) >= 1;
    });
    const reduced = number / divisor;
    return `${formatNumber(reduced)}${suffix}`;
}
exports.default = createFragmentContainer(StatsChange, graphql `
	fragment StatsChange_snapshots on VideoStats @relay(plural: true) {
		views
		likes
		dislikes
		favorites
		comments
	}
`);
//# sourceMappingURL=data:application/json;base64,