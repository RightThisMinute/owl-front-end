"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const last = require("lodash/last");
const isEqual = require("lodash/isEqual");
const React = require("react");
class CascadedColumnsList extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            offsets: {}
        };
    }
    componentWillReceiveProps({ children: nextChildren }) {
        const { children } = this.props;
        const getID = (child) => child.props.id;
        const ids = React.Children.map(children, getID);
        const nextIDs = React.Children.map(nextChildren, getID);
        if (!isEqual(ids, nextIDs)) {
            console.debug('reset');
            this.setState({ offsets: {} });
        }
    }
    componentDidMount() {
        console.debug('did mount');
        this.setState({
            offsets: this.computeOffsets()
        });
    }
    componentDidUpdate() {
        console.debug('did update');
        if (Object.keys(this.state.offsets).length === 0)
            this.setState({
                offsets: this.computeOffsets()
            });
    }
    render() {
        const children = React.Children.map(this.props.children, (child) => {
            let style = {};
            const offset = this.state.offsets[child.props.id];
            if (offset === undefined)
                return child;
            style.transform = `translateY(${offset}px)`;
            return React.cloneElement(child, { style });
        });
        return (React.createElement("div", { className: "items cascaded-column-list", ref: ref => this.el = ref }, children));
    }
    computeOffsets() {
        console.debug('scooching');
        if (!this.el)
            return {};
        const elements = this.el.querySelectorAll(':scope > *');
        if (elements.length === 0)
            return {};
        // `this.elementToItem()` requires this.
        this.offsetParentTop = elements.item(0).getBoundingClientRect().top;
        const items = [];
        elements.forEach(el => {
            items.push(this.elementToItem(el));
        });
        const columns = this.splitIntoColumns(items);
        const offsets = columns.map(this.computeColumnOffsets.bind(this));
        return Object.assign({}, ...offsets);
    }
    elementToItem(element) {
        const top = this.offsetParentTop + element.offsetTop;
        // Get the true top position relative to the document root, unaffected by
        // any transforms.
        const styles = window.getComputedStyle(element);
        let { height } = element.getBoundingClientRect();
        height += (parseInt(styles.marginTop || '0', 10) || 0)
            + (parseInt(styles.marginBottom || '0', 10) || 0);
        return { el: element, top, height };
    }
    splitIntoColumns(items) {
        let prevCol;
        return items.reduce((columns, item, index) => {
            let col;
            if (columns.length === 0)
                col = 0;
            else if (columns.length === index) {
                // Potentially need to add another column.
                const prevItem = last(columns[prevCol]);
                if (item.top === prevItem.top)
                    col = columns.length;
            }
            if (col === undefined)
                col = index % columns.length;
            if (!columns[col])
                columns[col] = [];
            columns[col].push(item);
            prevCol = col;
            return columns;
        }, []);
    }
    computeColumnOffsets(items) {
        let prevOffset = 0;
        return items.reduce((offsets, item, index, list) => {
            const id = item.el.getAttribute('id');
            if (id === null)
                return offsets;
            if (index === 0) {
                offsets[id] = 0;
                return offsets;
            }
            const prevItem = list[index - 1];
            const y = prevItem.top + prevOffset + prevItem.height;
            offsets[id] = prevOffset = y - item.top;
            return offsets;
        }, {});
    }
}
exports.default = CascadedColumnsList;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2FzY2FkZWRDb2x1bW5zTGlzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0Nhc2NhZGVkQ29sdW1uc0xpc3QudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0Esb0NBQW9DO0FBQ3BDLDBDQUEwQztBQUMxQywrQkFBOEI7QUE0QjlCLHlCQUF5QyxTQUFRLEtBQUssQ0FBQyxTQUF1QjtJQUs3RSxZQUFZLEtBQUs7UUFDaEIsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBRVosSUFBSSxDQUFDLEtBQUssR0FBRztZQUNaLE9BQU8sRUFBRSxFQUFFO1NBQ1gsQ0FBQTtJQUNGLENBQUM7SUFFRCx5QkFBeUIsQ0FBQyxFQUFFLFFBQVEsRUFBRSxZQUFZLEVBQVM7UUFDMUQsTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUE7UUFFL0IsTUFBTSxLQUFLLEdBQUcsQ0FBQyxLQUFZLEtBQUssS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUE7UUFFOUMsTUFBTSxHQUFHLEdBQU8sS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFBO1FBQ25ELE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFlBQVksRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUV2RCxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzVCLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUE7WUFDdEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFBO1FBQy9CLENBQUM7SUFDRixDQUFDO0lBRUQsaUJBQWlCO1FBQ2hCLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUE7UUFDMUIsSUFB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bGFzdCcpXG5pbXBvcnQgaXNFcXVhbCA9IHJlcXVpcmUoJ2xvZGFzaC9pc0VxdWFsJylcbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5pbXBvcnQgeyBWaWRlb1Byb3BzIH0gZnJvbSAnLi9WaWRlbydcblxuXG5pbnRlcmZhY2UgQ2hpbGRQcm9wcyB7XG5cdGlkOiBzdHJpbmdcblx0c3R5bGU6IFJlYWN0LkNTU1Byb3BlcnRpZXNcbn1cblxudHlwZSBDaGlsZCA9IFJlYWN0LlJlYWN0RWxlbWVudDxDaGlsZFByb3BzPlxudHlwZSBPZmZzZXRMaXN0ID0geyBba2V5OiBzdHJpbmddOiBudW1iZXIgfVxuXG5pbnRlcmZhY2UgUHJvcHMge1xuXHRjaGlsZHJlbjogQ2hpbGRbXVxufVxuXG5pbnRlcmZhY2UgU3RhdGUge1xuXHRvZmZzZXRzOiBPZmZzZXRMaXN0XG59XG5cbmludGVyZmFjZSBJdGVtIHtcblx0ZWw6IEVsZW1lbnRcblx0dG9wOiBudW1iZXJcblx0aGVpZ2h0OiBudW1iZXJcbn1cblxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYXNjYWRlZENvbHVtbnNMaXN0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFByb3BzLCBTdGF0ZT4ge1xuXG5cdHByaXZhdGUgZWw6IEhUTUxFbGVtZW50fG51bGxcblx0cHJpdmF0ZSBvZmZzZXRQYXJlbnRUb3A6IG51bWJlclxuXG5cdGNvbnN0cnVjdG9yKHByb3BzKSB7XG5cdFx0c3VwZXIocHJvcHMpXG5cblx0XHR0aGlzLnN0YXRlID0ge1xuXHRcdFx0b2Zmc2V0czoge31cblx0XHR9XG5cdH1cblxuXHRjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKHsgY2hpbGRyZW46IG5leHRDaGlsZHJlbiB9OiBQcm9wcykge1xuXHRcdGNvbnN0IHsgY2hpbGRyZW4gfSA9IHRoaXMucHJvcHNcblxuXHRcdGNvbnN0IGdldElEID0gKGNoaWxkOiBDaGlsZCkgPT4gY2hpbGQucHJvcHMuaWRcblxuXHRcdGNvbnN0IGlkcyAgICAgPSBSZWFjdC5DaGlsZHJlbi5tYXAoY2hpbGRyZW4sIGdldElEKVxuXHRcdGNvbnN0IG5leHRJRHMgPSBSZWFjdC5DaGlsZHJlbi5tYXAobmV4dENoaWxkcmVuLCBnZXRJRClcblxuXHRcdGlmICghaXNFcXVhbChpZHMsIG5leHRJRHMpKSB7XG5cdFx0XHRjb25zb2xlLmRlYnVnKCdyZXNldCcpXG5cdFx0XHR0aGlzLnNldFN0YXRlKHsgb2Zmc2V0czoge30gfSlcblx0XHR9XG5cdH1cblxuXHRjb21wb25lbnREaWRNb3VudCgpIHtcblx0XHRjb25zb2xlLmRlYnVnKCdkaWQgbW91bnQnKVxuXHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0b2Zmc2V0czogdGhpcy5jb21wdXRlT2Zmc2V0cygpXG5cdFx0fSlcblxuXHR9XG5cblx0Y29tcG9uZW50RGlkVXBkYXRlKCkge1xuXHRcdGNvbnNvbGUuZGVidWcoJ2RpZCB1cGRhdGUnKVxuXHRcdGlmIChPYmplY3Qua2V5cyh0aGlzLnN0YXRlLm9mZnNldHMpLmxlbmd0aCA9PT0gMClcblx0XHRcdHRoaXMuc2V0U3RhdGUoe1xuXHRcdFx0XHRvZmZzZXRzOiB0aGlzLmNvbXB1dGVPZmZzZXRzKClcblx0XHRcdH0pXG5cdH1cblxuXHRyZW5kZXIoKSB7XG5cdFx0Y29uc3QgY2hpbGRyZW4gPSBSZWFjdC5DaGlsZHJlbi5tYXAodGhpcy5wcm9wcy5jaGlsZHJlbixcblx0XHQoY2hpbGQ6IENoaWxkKSA9PiB7XG5cdFx0XHRsZXQgc3R5bGU6IFJlYWN0LkNTU1Byb3BlcnRpZXMgPSB7fVxuXG5cdFx0XHRjb25zdCBvZmZzZXQ6IG51bWJlcnx1bmRlZmluZWQgPSB0aGlzLnN0YXRlLm9mZnNldHNbY2hpbGQucHJvcHMuaWRdXG5cdFx0XHRpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpXG5cdFx0XHRcdHJldHVybiBjaGlsZFxuXG5cdFx0XHRzdHlsZS50cmFuc2Zvcm0gPSBgdHJhbnNsYXRlWSgke29mZnNldH1weClgXG5cdFx0XHRyZXR1cm4gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCB7IHN0eWxlIH0pXG5cdFx0fSlcblxuXHRcdHJldHVybiAoXG5cdFx0XHQ8ZGl2IGNsYXNzTmFtZT1cIml0ZW1zIGNhc2NhZGVkLWNvbHVtbi1saXN0XCJcblx0XHRcdCAgICAgcmVmPXtyZWYgPT4gdGhpcy5lbCA9IHJlZn0+XG5cdFx0XHRcdHtjaGlsZHJlbn1cblx0XHRcdDwvZGl2PlxuXHRcdClcblx0fVxuXG5cdHByaXZhdGUgY29tcHV0ZU9mZnNldHMoKTogT2Zmc2V0TGlzdCB7XG5cdFx0Y29uc29sZS5kZWJ1Zygnc2Nvb2NoaW5nJylcblx0XHRpZiAoIXRoaXMuZWwpXG5cdFx0XHRyZXR1cm4ge307XG5cblx0XHRjb25zdCBlbGVtZW50cyA9IHRoaXMuZWwucXVlcnlTZWxlY3RvckFsbCgnOnNjb3BlID4gKicpXG5cdFx0aWYgKGVsZW1lbnRzLmxlbmd0aCA9PT0gMClcblx0XHRcdHJldHVybiB7fTtcblxuXHRcdC8vIGB0aGlzLmVsZW1lbnRUb0l0ZW0oKWAgcmVxdWlyZXMgdGhpcy5cblx0XHR0aGlzLm9mZnNldFBhcmVudFRvcCA9IGVsZW1lbnRzLml0ZW0oMCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wXG5cblx0XHRjb25zdCBpdGVtczogSXRlbVtdID0gW11cblx0XHRlbGVtZW50cy5mb3JFYWNoKGVsID0+IHtcblx0XHRcdGl0ZW1zLnB1c2godGhpcy5lbGVtZW50VG9JdGVtKGVsIGFzIEhUTUxFbGVtZW50KSlcblx0XHR9KVxuXG5cdFx0Y29uc3QgY29sdW1ucyA9IHRoaXMuc3BsaXRJbnRvQ29sdW1ucyhpdGVtcylcblxuXHRcdGNvbnN0IG9mZnNldHM6IE9mZnNldExpc3RbXSA9XG5cdFx0XHRjb2x1bW5zLm1hcCh0aGlzLmNvbXB1dGVDb2x1bW5PZmZzZXRzLmJpbmQodGhpcykpXG5cblx0XHRyZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgLi4ub2Zmc2V0cylcblx0fVxuXG5cdGVsZW1lbnRUb0l0ZW0oZWxlbWVudDogSFRNTEVsZW1lbnQpOiBJdGVtIHtcblx0XHRjb25zdCB0b3AgPSB0aGlzLm9mZnNldFBhcmVudFRvcCArIGVsZW1lbnQub2Zmc2V0VG9wXG5cdFx0XHQvLyBHZXQgdGhlIHRydWUgdG9wIHBvc2l0aW9uIHJlbGF0aXZlIHRvIHRoZSBkb2N1bWVudCByb290LCB1bmFmZmVjdGVkIGJ5XG5cdFx0XHQvLyBhbnkgdHJhbnNmb3Jtcy5cblx0XHRjb25zdCBzdHlsZXMgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbGVtZW50KVxuXG5cdFx0bGV0IHsgaGVpZ2h0IH0gPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG5cdFx0aGVpZ2h0ICs9IChwYXJzZUludChzdHlsZXMubWFyZ2luVG9wICAgIHx8ICcwJywgMTApIHx8IDApXG5cdFx0ICAgICAgICArIChwYXJzZUludChzdHlsZXMubWFyZ2luQm90dG9tIHx8ICcwJywgMTApIHx8IDApXG5cblx0XHRyZXR1cm4geyBlbDogZWxlbWVudCwgdG9wLCBoZWlnaHQgfVxuXHR9XG5cblx0c3BsaXRJbnRvQ29sdW1ucyhpdGVtczogSXRlbVtdKTogSXRlbVtdW10ge1xuXHRcdGxldCBwcmV2Q29sOiBudW1iZXJcblxuXHRcdHJldHVybiBpdGVtcy5yZWR1Y2UoKGNvbHVtbnMsIGl0ZW0sIGluZGV4KSA9PiB7XG5cdFx0XHRsZXQgY29sOiBudW1iZXJ8dW5kZWZpbmVkXG5cblx0XHRcdGlmIChjb2x1bW5zLmxlbmd0aCA9PT0gMClcblx0XHRcdFx0Y29sID0gMFxuXHRcdFx0ZWxzZSBpZiAoY29sdW1ucy5sZW5ndGggPT09IGluZGV4KSB7XG5cdFx0XHRcdC8vIFBvdGVudGlhbGx5IG5lZWQgdG8gYWRkIGFub3RoZXIgY29sdW1uLlxuXHRcdFx0XHRjb25zdCBwcmV2SXRlbSA9IGxhc3QoY29sdW1uc1twcmV2Q29sXSkgYXMgSXRlbVxuXHRcdFx0XHRpZiAoaXRlbS50b3AgPT09IHByZXZJdGVtLnRvcClcblx0XHRcdFx0XHRjb2wgPSBjb2x1bW5zLmxlbmd0aFxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoY29sID09PSB1bmRlZmluZWQpXG5cdFx0XHRcdGNvbCA9IGluZGV4ICUgY29sdW1ucy5sZW5ndGhcblxuXHRcdFx0aWYgKCFjb2x1bW5zW2NvbF0pXG5cdFx0XHRcdGNvbHVtbnNbY29sXSA9IFtdXG5cblx0XHRcdGNvbHVtbnNbY29sXS5wdXNoKGl0ZW0pXG5cdFx0XHRwcmV2Q29sID0gY29sXG5cblx0XHRcdHJldHVybiBjb2x1bW5zXG5cdFx0fSwgW10gYXMgSXRlbVtdW10pXG5cdH1cblxuXHRjb21wdXRlQ29sdW1uT2Zmc2V0cyhpdGVtczogSXRlbVtdKTogT2Zmc2V0TGlzdCB7XG5cdFx0bGV0IHByZXZPZmZzZXQgPSAwXG5cblx0XHRyZXR1cm4gaXRlbXMucmVkdWNlKChvZmZzZXRzLCBpdGVtLCBpbmRleCwgbGlzdCkgPT4ge1xuXHRcdFx0Y29uc3QgaWQgPSBpdGVtLmVsLmdldEF0dHJpYnV0ZSgnaWQnKVxuXHRcdFx0aWYgKGlkID09PSBudWxsKVxuXHRcdFx0XHRyZXR1cm4gb2Zmc2V0cztcblxuXHRcdFx0aWYgKGluZGV4ID09PSAwKSB7XG5cdFx0XHRcdG9mZnNldHNbaWRdID0gMFxuXHRcdFx0XHRyZXR1cm4gb2Zmc2V0cztcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgcHJldkl0ZW0gPSBsaXN0W2luZGV4LTFdXG5cdFx0XHRjb25zdCB5ID0gcHJldkl0ZW0udG9wICsgcHJldk9mZnNldCArIHByZXZJdGVtLmhlaWdodFxuXHRcdFx0b2Zmc2V0c1tpZF0gPSBwcmV2T2Zmc2V0ID0geSAtIGl0ZW0udG9wXG5cblx0XHRcdHJldHVybiBvZmZzZXRzXG5cdFx0fSwge30gYXMgT2Zmc2V0TGlzdClcblx0fVxuXG59XG4iXX0=