"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const last = require("lodash/last");
const isEqual = require("lodash/isEqual");
const React = require("react");
class CascadedColumnsList extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            offsets: {}
        };
        this.imageLoadHandler = this.updateOffsets.bind(this);
    }
    componentWillReceiveProps({ children: nextChildren }) {
        const { children } = this.props;
        const getID = (child) => child.props.id;
        const ids = React.Children.map(children, getID);
        const nextIDs = React.Children.map(nextChildren, getID);
        if (!isEqual(ids, nextIDs)) {
            console.debug('reset');
            this.setState({ offsets: {} });
        }
    }
    componentWillUpdate() {
        this.unsetUpdateOnImageLoadListeners();
    }
    componentDidMount() {
        console.debug('did mount');
        this.setUpdateOnImageLoadListeners();
        this.updateOffsets();
    }
    componentDidUpdate() {
        console.debug('did update');
        this.setUpdateOnImageLoadListeners();
        if (Object.keys(this.state.offsets).length === 0)
            this.updateOffsets();
    }
    componentWillUnmount() {
        this.unsetUpdateOnImageLoadListeners();
    }
    render() {
        const children = React.Children.map(this.props.children, (child) => {
            let style = {};
            const offset = this.state.offsets[child.props.id];
            if (offset === undefined)
                return child;
            style.transform = `translateY(${offset}px)`;
            return React.cloneElement(child, { style });
        });
        return (React.createElement("div", { className: "items cascaded-column-list", ref: ref => this.el = ref }, children));
    }
    setUpdateOnImageLoadListeners() {
        if (!this.el)
            return;
        this.images = [];
        const images = this.el.getElementsByTagName('img');
        for (let i = 0; i < images.length; i++)
            this.images.push(images.item(i));
        this.images.forEach(img => {
            img.addEventListener('load', this.imageLoadHandler);
        });
    }
    unsetUpdateOnImageLoadListeners() {
        if (this.images === undefined)
            return;
        this.images.forEach(img => {
            img.addEventListener('load', this.imageLoadHandler);
        });
    }
    updateOffsets() {
        const offsets = this.computeOffsets();
        if (!isEqual(offsets, this.state.offsets))
            this.setState({ offsets });
    }
    computeOffsets() {
        console.debug('scooching');
        if (!this.el)
            return {};
        const elements = this.el.querySelectorAll(':scope > *');
        if (elements.length === 0)
            return {};
        // `this.elementToItem()` requires this.
        this.offsetParentTop = elements.item(0).getBoundingClientRect().top;
        const items = [];
        elements.forEach(el => {
            items.push(this.elementToItem(el));
        });
        const columns = this.splitIntoColumns(items);
        const offsets = columns.map(this.computeColumnOffsets.bind(this));
        return Object.assign({}, ...offsets);
    }
    elementToItem(element) {
        const top = this.offsetParentTop + element.offsetTop;
        // Get the true top position relative to the document root, unaffected by
        // any transforms.
        const styles = window.getComputedStyle(element);
        let { height } = element.getBoundingClientRect();
        height += (parseInt(styles.marginTop || '0', 10) || 0)
            + (parseInt(styles.marginBottom || '0', 10) || 0);
        return { el: element, top, height };
    }
    splitIntoColumns(items) {
        let prevCol;
        return items.reduce((columns, item, index) => {
            let col;
            if (columns.length === 0)
                col = 0;
            else if (columns.length === index) {
                // Potentially need to add another column.
                const prevItem = last(columns[prevCol]);
                if (item.top === prevItem.top)
                    col = columns.length;
            }
            if (col === undefined)
                col = index % columns.length;
            if (!columns[col])
                columns[col] = [];
            columns[col].push(item);
            prevCol = col;
            return columns;
        }, []);
    }
    computeColumnOffsets(items) {
        let prevOffset = 0;
        return items.reduce((offsets, item, index, list) => {
            const id = item.el.getAttribute('id');
            if (id === null)
                return offsets;
            if (index === 0) {
                offsets[id] = 0;
                return offsets;
            }
            const prevItem = list[index - 1];
            const y = prevItem.top + prevOffset + prevItem.height;
            offsets[id] = prevOffset = y - item.top;
            return offsets;
        }, {});
    }
}
exports.default = CascadedColumnsList;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2FzY2FkZWRDb2x1bW5zTGlzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0Nhc2NhZGVkQ29sdW1uc0xpc3QudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0Esb0NBQW9DO0FBQ3BDLDBDQUEwQztBQUMxQywrQkFBOEI7QUE0QjlCLHlCQUF5QyxTQUFRLEtBQUssQ0FBQyxTQUF1QjtJQU83RSxZQUFZLEtBQUs7UUFDaEIsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBRVosSUFBSSxDQUFDLEtBQUssR0FBRztZQUNaLE9BQU8sRUFBRSxFQUFFO1NBQ1gsQ0FBQTtRQUVELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUN0RCxDQUFDO0lBRUQseUJBQXlCLENBQUMsRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFTO1FBQzFELE1BQU0sRUFBRSxRQUFRLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFBO1FBRS9CLE1BQU0sS0FBSyxHQUFHLENBQUMsS0FBWSxLQUFLLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFBO1FBRTlDLE1BQU0sR0FBRyxHQUFPLEtBQUssQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQTtRQUNuRCxNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxZQUFZLEVBQUUsS0FBSyxDQUFDLENBQUE7UUFFdkQsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM1QixPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBO1lBQ3RCLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQTtRQUMvQixDQUFD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LEdBQUcsQ0FBQTtZQUV2QyxNQUFNLENBQUMsT0FBTyxDQUFBO1FBQ2YsQ0FBQyxFQUFFLEVBQWdCLENBQUMsQ0FBQTtJQUNyQixDQUFDO0NBRUQ7QUE3TEQsc0NBNkxDIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgbGFzdCA9IHJlcXVpcmUoJ2xvZGFzaC9sYXN0JylcbmltcG9ydCBpc0VxdWFsID0gcmVxdWlyZSgnbG9kYXNoL2lzRXF1YWwnKVxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnXG5cbmltcG9ydCB7IFZpZGVvUHJvcHMgfSBmcm9tICcuL1ZpZGVvJ1xuXG5cbmludGVyZmFjZSBDaGlsZFByb3BzIHtcblx0aWQ6IHN0cmluZ1xuXHRzdHlsZTogUmVhY3QuQ1NTUHJvcGVydGllc1xufVxuXG50eXBlIENoaWxkID0gUmVhY3QuUmVhY3RFbGVtZW50PENoaWxkUHJvcHM+XG50eXBlIE9mZnNldExpc3QgPSB7IFtrZXk6IHN0cmluZ106IG51bWJlciB9XG5cbmludGVyZmFjZSBQcm9wcyB7XG5cdGNoaWxkcmVuOiBDaGlsZFtdXG59XG5cbmludGVyZmFjZSBTdGF0ZSB7XG5cdG9mZnNldHM6IE9mZnNldExpc3Rcbn1cblxuaW50ZXJmYWNlIEl0ZW0ge1xuXHRlbDogRWxlbWVudFxuXHR0b3A6IG51bWJlclxuXHRoZWlnaHQ6IG51bWJlclxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhc2NhZGVkQ29sdW1uc0xpc3QgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsIFN0YXRlPiB7XG5cblx0cHJpdmF0ZSBlbDogSFRNTEVsZW1lbnR8bnVsbFxuXHRwcml2YXRlIG9mZnNldFBhcmVudFRvcDogbnVtYmVyXG5cdHByaXZhdGUgaW1hZ2VzOiBIVE1MSW1hZ2VFbGVtZW50W118dW5kZWZpbmVkXG5cdHByaXZhdGUgaW1hZ2VMb2FkSGFuZGxlcjogKCkgPT4gdm9pZFxuXG5cdGNvbnN0cnVjdG9yKHByb3BzKSB7XG5cdFx0c3VwZXIocHJvcHMpXG5cblx0XHR0aGlzLnN0YXRlID0ge1xuXHRcdFx0b2Zmc2V0czoge31cblx0XHR9XG5cblx0XHR0aGlzLmltYWdlTG9hZEhhbmRsZXIgPSB0aGlzLnVwZGF0ZU9mZnNldHMuYmluZCh0aGlzKVxuXHR9XG5cblx0Y29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyh7IGNoaWxkcmVuOiBuZXh0Q2hpbGRyZW4gfTogUHJvcHMpIHtcblx0XHRjb25zdCB7IGNoaWxkcmVuIH0gPSB0aGlzLnByb3BzXG5cblx0XHRjb25zdCBnZXRJRCA9IChjaGlsZDogQ2hpbGQpID0+IGNoaWxkLnByb3BzLmlkXG5cblx0XHRjb25zdCBpZHMgICAgID0gUmVhY3QuQ2hpbGRyZW4ubWFwKGNoaWxkcmVuLCBnZXRJRClcblx0XHRjb25zdCBuZXh0SURzID0gUmVhY3QuQ2hpbGRyZW4ubWFwKG5leHRDaGlsZHJlbiwgZ2V0SUQpXG5cblx0XHRpZiAoIWlzRXF1YWwoaWRzLCBuZXh0SURzKSkge1xuXHRcdFx0Y29uc29sZS5kZWJ1ZygncmVzZXQnKVxuXHRcdFx0dGhpcy5zZXRTdGF0ZSh7IG9mZnNldHM6IHt9IH0pXG5cdFx0fVxuXHR9XG5cblx0Y29tcG9uZW50V2lsbFVwZGF0ZSgpIHtcblx0XHR0aGlzLnVuc2V0VXBkYXRlT25JbWFnZUxvYWRMaXN0ZW5lcnMoKVxuXHR9XG5cblx0Y29tcG9uZW50RGlkTW91bnQoKSB7XG5cdFx0Y29uc29sZS5kZWJ1ZygnZGlkIG1vdW50Jylcblx0XHR0aGlzLnNldFVwZGF0ZU9uSW1hZ2VMb2FkTGlzdGVuZXJzKClcblx0XHR0aGlzLnVwZGF0ZU9mZnNldHMoKVxuXHR9XG5cblx0Y29tcG9uZW50RGlkVXBkYXRlKCkge1xuXHRcdGNvbnNvbGUuZGVidWcoJ2RpZCB1cGRhdGUnKVxuXHRcdHRoaXMuc2V0VXBkYXRlT25JbWFnZUxvYWRMaXN0ZW5lcnMoKVxuXHRcdGlmIChPYmplY3Qua2V5cyh0aGlzLnN0YXRlLm9mZnNldHMpLmxlbmd0aCA9PT0gMClcblx0XHRcdHRoaXMudXBkYXRlT2Zmc2V0cygpXG5cdH1cblxuXHRjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcblx0XHR0aGlzLnVuc2V0VXBkYXRlT25JbWFnZUxvYWRMaXN0ZW5lcnMoKVxuXHR9XG5cblx0cmVuZGVyKCkge1xuXHRcdGNvbnN0IGNoaWxkcmVuID0gUmVhY3QuQ2hpbGRyZW4ubWFwKHRoaXMucHJvcHMuY2hpbGRyZW4sXG5cdFx0KGNoaWxkOiBDaGlsZCkgPT4ge1xuXHRcdFx0bGV0IHN0eWxlOiBSZWFjdC5DU1NQcm9wZXJ0aWVzID0ge31cblxuXHRcdFx0Y29uc3Qgb2Zmc2V0OiBudW1iZXJ8dW5kZWZpbmVkID0gdGhpcy5zdGF0ZS5vZmZzZXRzW2NoaWxkLnByb3BzLmlkXVxuXHRcdFx0aWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKVxuXHRcdFx0XHRyZXR1cm4gY2hpbGRcblxuXHRcdFx0c3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZVkoJHtvZmZzZXR9cHgpYFxuXHRcdFx0cmV0dXJuIFJlYWN0LmNsb25lRWxlbWVudChjaGlsZCwgeyBzdHlsZSB9KVxuXHRcdH0pXG5cblx0XHRyZXR1cm4gKFxuXHRcdFx0PGRpdiBjbGFzc05hbWU9XCJpdGVtcyBjYXNjYWRlZC1jb2x1bW4tbGlzdFwiXG5cdFx0XHQgICAgIHJlZj17cmVmID0+IHRoaXMuZWwgPSByZWZ9PlxuXHRcdFx0XHR7Y2hpbGRyZW59XG5cdFx0XHQ8L2Rpdj5cblx0XHQpXG5cdH1cblxuXHRwcml2YXRlIHNldFVwZGF0ZU9uSW1hZ2VMb2FkTGlzdGVuZXJzKCk6IHZvaWQge1xuXHRcdGlmICghdGhpcy5lbClcblx0XHRcdHJldHVybjtcblxuXHRcdHRoaXMuaW1hZ2VzID0gW11cblx0XHRjb25zdCBpbWFnZXMgPSB0aGlzLmVsLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdpbWcnKVxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgaW1hZ2VzLmxlbmd0aDsgaSsrKVxuXHRcdFx0dGhpcy5pbWFnZXMucHVzaChpbWFnZXMuaXRlbShpKSlcblxuXHRcdHRoaXMuaW1hZ2VzLmZvckVhY2goaW1nID0+IHtcblx0XHRcdGltZy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgdGhpcy5pbWFnZUxvYWRIYW5kbGVyKVxuXHRcdH0pXG5cdH1cblxuXHRwcml2YXRlIHVuc2V0VXBkYXRlT25JbWFnZUxvYWRMaXN0ZW5lcnMoKTogdm9pZCB7XG5cdFx0aWYgKHRoaXMuaW1hZ2VzID09PSB1bmRlZmluZWQpXG5cdFx0XHRyZXR1cm47XG5cblx0XHR0aGlzLmltYWdlcy5mb3JFYWNoKGltZyA9PiB7XG5cdFx0XHRpbWcuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIHRoaXMuaW1hZ2VMb2FkSGFuZGxlcilcblx0XHR9KVxuXHR9XG5cblx0cHJpdmF0ZSB1cGRhdGVPZmZzZXRzKCk6IHZvaWQge1xuXHRcdGNvbnN0IG9mZnNldHMgPSB0aGlzLmNvbXB1dGVPZmZzZXRzKClcblx0XHRpZiAoIWlzRXF1YWwob2Zmc2V0cywgdGhpcy5zdGF0ZS5vZmZzZXRzKSlcblx0XHRcdHRoaXMuc2V0U3RhdGUoeyBvZmZzZXRzIH0pXG5cdH1cblxuXHRwcml2YXRlIGNvbXB1dGVPZmZzZXRzKCk6IE9mZnNldExpc3Qge1xuXHRcdGNvbnNvbGUuZGVidWcoJ3Njb29jaGluZycpXG5cdFx0aWYgKCF0aGlzLmVsKVxuXHRcdFx0cmV0dXJuIHt9O1xuXG5cdFx0Y29uc3QgZWxlbWVudHMgPSB0aGlzLmVsLnF1ZXJ5U2VsZWN0b3JBbGwoJzpzY29wZSA+IConKVxuXHRcdGlmIChlbGVtZW50cy5sZW5ndGggPT09IDApXG5cdFx0XHRyZXR1cm4ge307XG5cblx0XHQvLyBgdGhpcy5lbGVtZW50VG9JdGVtKClgIHJlcXVpcmVzIHRoaXMuXG5cdFx0dGhpcy5vZmZzZXRQYXJlbnRUb3AgPSBlbGVtZW50cy5pdGVtKDApLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcFxuXG5cdFx0Y29uc3QgaXRlbXM6IEl0ZW1bXSA9IFtdXG5cdFx0ZWxlbWVudHMuZm9yRWFjaChlbCA9PiB7XG5cdFx0XHRpdGVtcy5wdXNoKHRoaXMuZWxlbWVudFRvSXRlbShlbCBhcyBIVE1MRWxlbWVudCkpXG5cdFx0fSlcblxuXHRcdGNvbnN0IGNvbHVtbnMgPSB0aGlzLnNwbGl0SW50b0NvbHVtbnMoaXRlbXMpXG5cblx0XHRjb25zdCBvZmZzZXRzOiBPZmZzZXRMaXN0W10gPVxuXHRcdFx0Y29sdW1ucy5tYXAodGhpcy5jb21wdXRlQ29sdW1uT2Zmc2V0cy5iaW5kKHRoaXMpKVxuXG5cdFx0cmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIC4uLm9mZnNldHMpXG5cdH1cblxuXHRlbGVtZW50VG9JdGVtKGVsZW1lbnQ6IEhUTUxFbGVtZW50KTogSXRlbSB7XG5cdFx0Y29uc3QgdG9wID0gdGhpcy5vZmZzZXRQYXJlbnRUb3AgKyBlbGVtZW50Lm9mZnNldFRvcFxuXHRcdFx0Ly8gR2V0IHRoZSB0cnVlIHRvcCBwb3NpdGlvbiByZWxhdGl2ZSB0byB0aGUgZG9jdW1lbnQgcm9vdCwgdW5hZmZlY3RlZCBieVxuXHRcdFx0Ly8gYW55IHRyYW5zZm9ybXMuXG5cdFx0Y29uc3Qgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudClcblxuXHRcdGxldCB7IGhlaWdodCB9ID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuXHRcdGhlaWdodCArPSAocGFyc2VJbnQoc3R5bGVzLm1hcmdpblRvcCAgICB8fCAnMCcsIDEwKSB8fCAwKVxuXHRcdCAgICAgICAgKyAocGFyc2VJbnQoc3R5bGVzLm1hcmdpbkJvdHRvbSB8fCAnMCcsIDEwKSB8fCAwKVxuXG5cdFx0cmV0dXJuIHsgZWw6IGVsZW1lbnQsIHRvcCwgaGVpZ2h0IH1cblx0fVxuXG5cdHNwbGl0SW50b0NvbHVtbnMoaXRlbXM6IEl0ZW1bXSk6IEl0ZW1bXVtdIHtcblx0XHRsZXQgcHJldkNvbDogbnVtYmVyXG5cblx0XHRyZXR1cm4gaXRlbXMucmVkdWNlKChjb2x1bW5zLCBpdGVtLCBpbmRleCkgPT4ge1xuXHRcdFx0bGV0IGNvbDogbnVtYmVyfHVuZGVmaW5lZFxuXG5cdFx0XHRpZiAoY29sdW1ucy5sZW5ndGggPT09IDApXG5cdFx0XHRcdGNvbCA9IDBcblx0XHRcdGVsc2UgaWYgKGNvbHVtbnMubGVuZ3RoID09PSBpbmRleCkge1xuXHRcdFx0XHQvLyBQb3RlbnRpYWxseSBuZWVkIHRvIGFkZCBhbm90aGVyIGNvbHVtbi5cblx0XHRcdFx0Y29uc3QgcHJldkl0ZW0gPSBsYXN0KGNvbHVtbnNbcHJldkNvbF0pIGFzIEl0ZW1cblx0XHRcdFx0aWYgKGl0ZW0udG9wID09PSBwcmV2SXRlbS50b3ApXG5cdFx0XHRcdFx0Y29sID0gY29sdW1ucy5sZW5ndGhcblx0XHRcdH1cblxuXHRcdFx0aWYgKGNvbCA9PT0gdW5kZWZpbmVkKVxuXHRcdFx0XHRjb2wgPSBpbmRleCAlIGNvbHVtbnMubGVuZ3RoXG5cblx0XHRcdGlmICghY29sdW1uc1tjb2xdKVxuXHRcdFx0XHRjb2x1bW5zW2NvbF0gPSBbXVxuXG5cdFx0XHRjb2x1bW5zW2NvbF0ucHVzaChpdGVtKVxuXHRcdFx0cHJldkNvbCA9IGNvbFxuXG5cdFx0XHRyZXR1cm4gY29sdW1uc1xuXHRcdH0sIFtdIGFzIEl0ZW1bXVtdKVxuXHR9XG5cblx0Y29tcHV0ZUNvbHVtbk9mZnNldHMoaXRlbXM6IEl0ZW1bXSk6IE9mZnNldExpc3Qge1xuXHRcdGxldCBwcmV2T2Zmc2V0ID0gMFxuXG5cdFx0cmV0dXJuIGl0ZW1zLnJlZHVjZSgob2Zmc2V0cywgaXRlbSwgaW5kZXgsIGxpc3QpID0+IHtcblx0XHRcdGNvbnN0IGlkID0gaXRlbS5lbC5nZXRBdHRyaWJ1dGUoJ2lkJylcblx0XHRcdGlmIChpZCA9PT0gbnVsbClcblx0XHRcdFx0cmV0dXJuIG9mZnNldHM7XG5cblx0XHRcdGlmIChpbmRleCA9PT0gMCkge1xuXHRcdFx0XHRvZmZzZXRzW2lkXSA9IDBcblx0XHRcdFx0cmV0dXJuIG9mZnNldHM7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHByZXZJdGVtID0gbGlzdFtpbmRleC0xXVxuXHRcdFx0Y29uc3QgeSA9IHByZXZJdGVtLnRvcCArIHByZXZPZmZzZXQgKyBwcmV2SXRlbS5oZWlnaHRcblx0XHRcdG9mZnNldHNbaWRdID0gcHJldk9mZnNldCA9IHkgLSBpdGVtLnRvcFxuXG5cdFx0XHRyZXR1cm4gb2Zmc2V0c1xuXHRcdH0sIHt9IGFzIE9mZnNldExpc3QpXG5cdH1cblxufVxuIl19