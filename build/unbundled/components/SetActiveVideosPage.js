"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const react_redux_1 = require("react-redux");
const { createFragmentContainer, graphql } = require('react-relay');
const store_1 = require("../store");
const reducer_1 = require("../reducer");
const SetActiveVideos_1 = require("../mutations/SetActiveVideos");
class SetActiveVideosPage extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            ids: props.activeVideos.map(({ id }) => id).join("\n") + "\n"
        };
        this.handleInputChange = this.handleInputChange.bind(this);
        this.handleSubmit = this.handleSubmit.bind(this);
    }
    handleInputChange(event) {
        const target = event.target;
        let value = target.type === 'checkbox' ? target.checked : target.value;
        if (target.name === 'ids')
            value = value
                .split("\n")
                .filter(url => url.trim() !== '')
                .map((url) => {
                const match = url.trim().match(/(?:[?&]v=|embed\/|youtu\.be\/)([\w\d_\-]*)/i);
                return match !== null ? match[1] : url;
            })
                .join("\n") + "\n";
        this.setState({
            [target.name]: value
        });
    }
    handleSubmit(event) {
        event.preventDefault();
        const ids = this.state.ids.trim().split("\n");
        SetActiveVideos_1.default.commit(this.props.relay.environment, ids);
    }
    componentWillUnmount() {
        store_1.store.dispatch({ type: reducer_1.Action.ResetSetActiveVideosFlags });
    }
    render() {
        let message = null;
        let messageClass = '';
        let buttonText = null;
        let disabled = false;
        if (this.props.saved) {
            messageClass = 'success';
            message = 'Set active videos successfully.';
        }
        else if (this.props.saving) {
            disabled = true;
            buttonText = 'Saving...';
        }
        else if (this.props.error) {
            messageClass = 'error';
            message = `Failed setting active videos (${this.props.error.message}).`;
        }
        if (message)
            message = (React.createElement("p", { className: messageClass }, message));
        return (React.createElement("section", { className: "set-active-videos" },
            React.createElement("form", { onSubmit: this.handleSubmit },
                React.createElement("p", null, "Put each URL on a separate line."),
                message,
                React.createElement("textarea", { name: "ids", value: this.state.ids, rows: 32, cols: 75, onChange: this.handleInputChange, disabled: disabled }),
                React.createElement("button", { disabled: disabled }, buttonText || 'Replace Active Videos'))));
    }
}
function mapStateToProps(storeState, props) {
    const { rtmOwl: { setActiveVideos: state } } = storeState;
    return Object.assign({}, props, {
        saved: state.setSuccessfully,
        saving: state.currentlyBeingSet,
        error: state.error,
    });
}
const ReduxSetActiveVideosPage = react_redux_1.connect(mapStateToProps)(SetActiveVideosPage);
exports.default = createFragmentContainer(ReduxSetActiveVideosPage, graphql `
	fragment SetActiveVideosPage_activeVideos on Video @relay(plural: true) {
		id
	}
`);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2V0QWN0aXZlVmlkZW9zUGFnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1NldEFjdGl2ZVZpZGVvc1BhZ2UudHN4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsK0JBQThCO0FBQzlCLDZDQUFxQztBQUNyQyxNQUFNLEVBQUUsdUJBQXVCLEVBQUUsT0FBTyxFQUFFLEdBQUcsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFBO0FBRW5FLG9DQUE0QztBQUM1Qyx3Q0FBbUM7QUFDbkMsa0VBQWtFO0FBcUJsRSx5QkFBMEIsU0FBUSxLQUFLLENBQUMsU0FBdUI7SUFFOUQsWUFBWSxLQUFLO1FBQ2hCLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUVaLElBQUksQ0FBQyxLQUFLLEdBQUc7WUFDWixHQUFHLEVBQUUsS0FBSyxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJO1NBQzdELENBQUE7UUFFRCxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtRQUMxRCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ2pELENBQUM7SUFFTyxpQkFBaUIsQ0FBQyxLQUFLO1FBQzlCLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUE7UUFDM0IsSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksS0FBSyxVQUFVLEdBQUcsTUFBTSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFBO1FBRXRFLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEtBQUssS0FBSyxDQUFDO1lBQ3pCLEtBQUssR0FBRyxLQUFLO2lCQUNY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QUFNLEVBQUUsTUFBTSxFQUFFLEVBQUUsZUFBZSxFQUFFLEtBQUssRUFBRSxFQUFFLEdBQUcsVUFBVSxDQUFBO0lBRXpELE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxLQUFLLEVBQUM7UUFDOUIsS0FBSyxFQUFFLEtBQUssQ0FBQyxlQUFlO1FBQzVCLE1BQU0sRUFBRSxLQUFLLENBQUMsaUJBQWlCO1FBQy9CLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSztLQUNsQixDQUFDLENBQUE7QUFDSCxDQUFDO0FBR0QsTUFBTSx3QkFBd0IsR0FBRyxxQkFBTyxDQUN2QyxlQUFlLENBQ2YsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO0FBR3RCLGtCQUFnQix1QkFBdUIsQ0FBQyx3QkFBd0IsRUFBRSxPQUFPLENBQUE7Ozs7Q0FJeEUsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICdyZWFjdC1yZWR1eCdcbmNvbnN0IHsgY3JlYXRlRnJhZ21lbnRDb250YWluZXIsIGdyYXBocWwgfSA9IHJlcXVpcmUoJ3JlYWN0LXJlbGF5JylcblxuaW1wb3J0IHsgc3RvcmUsIFN0b3JlU3RhdGUgfSBmcm9tICcuLi9zdG9yZSdcbmltcG9ydCB7IEFjdGlvbiB9IGZyb20gJy4uL3JlZHVjZXInXG5pbXBvcnQgU2V0QWN0aXZlVmlkZW9zTXV0YXRpb24gZnJvbSAnLi4vbXV0YXRpb25zL1NldEFjdGl2ZVZpZGVvcydcblxuaW50ZXJmYWNlIE93blByb3BzIHtcblx0YWN0aXZlVmlkZW9zOiB7IGlkOiBzdHJpbmcgfVtdXG5cdHJlbGF5OiB7IGVudmlyb25tZW50OiBhbnkgfVxufVxuXG5pbnRlcmZhY2UgU3RhdGVQcm9wcyB7XG5cdHNhdmVkOiBib29sZWFuLFxuXHRzYXZpbmc6IGJvb2xlYW4sXG5cdGVycm9yOiBFcnJvcnxudWxsXG59XG5cbmludGVyZmFjZSBEaXNwYXRjaFByb3BzIHt9XG5cbnR5cGUgUHJvcHMgPSBPd25Qcm9wcyAmIFN0YXRlUHJvcHMgJiBEaXNwYXRjaFByb3BzXG5cbmludGVyZmFjZSBTdGF0ZSB7XG5cdGlkczogc3RyaW5nXG59XG5cbmNsYXNzIFNldEFjdGl2ZVZpZGVvc1BhZ2UgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8UHJvcHMsIFN0YXRlPiB7XG5cblx0Y29uc3RydWN0b3IocHJvcHMpIHtcblx0XHRzdXBlcihwcm9wcylcblxuXHRcdHRoaXMuc3RhdGUgPSB7XG5cdFx0XHRpZHM6IHByb3BzLmFjdGl2ZVZpZGVvcy5tYXAoKHsgaWQgfSkgPT4gaWQpLmpvaW4oXCJcXG5cIikgKyBcIlxcblwiXG5cdFx0fVxuXG5cdFx0dGhpcy5oYW5kbGVJbnB1dENoYW5nZSA9IHRoaXMuaGFuZGxlSW5wdXRDaGFuZ2UuYmluZCh0aGlzKVxuXHRcdHRoaXMuaGFuZGxlU3VibWl0ID0gdGhpcy5oYW5kbGVTdWJtaXQuYmluZCh0aGlzKVxuXHR9XG5cblx0cHJpdmF0ZSBoYW5kbGVJbnB1dENoYW5nZShldmVudCk6IHZvaWQge1xuXHRcdGNvbnN0IHRhcmdldCA9IGV2ZW50LnRhcmdldFxuXHRcdGxldCB2YWx1ZSA9IHRhcmdldC50eXBlID09PSAnY2hlY2tib3gnID8gdGFyZ2V0LmNoZWNrZWQgOiB0YXJnZXQudmFsdWVcblxuXHRcdGlmICh0YXJnZXQubmFtZSA9PT0gJ2lkcycpXG5cdFx0XHR2YWx1ZSA9IHZhbHVlXG5cdFx0XHRcdC5zcGxpdChcIlxcblwiKVxuXHRcdFx0XHQuZmlsdGVyKHVybCA9PiB1cmwudHJpbSgpICE9PSAnJylcblx0XHRcdFx0Lm1hcCgodXJsKSA9PiB7XG5cdFx0XHRcdFx0Y29uc3QgbWF0Y2ggPSB1cmwudHJpbSgpLm1hdGNoKFxuXHRcdFx0XHRcdFx0Lyg/Ols/Jl12PXxlbWJlZFxcL3x5b3V0dVxcLmJlXFwvKShbXFx3XFxkX1xcLV0qKS9pXG5cdFx0XHRcdFx0KVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaCAhPT0gbnVsbCA/IG1hdGNoWzFdIDogdXJsXG5cdFx0XHRcdH0pXG5cdFx0XHRcdC5qb2luKFwiXFxuXCIpICsgXCJcXG5cIlxuXG5cdFx0dGhpcy5zZXRTdGF0ZSh7XG5cdFx0XHRbdGFyZ2V0Lm5hbWVdOiB2YWx1ZVxuXHRcdH0pXG5cdH1cblxuXHRwcml2YXRlIGhhbmRsZVN1Ym1pdChldmVudCk6IHZvaWQge1xuXHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KClcblxuXHRcdGNvbnN0IGlkcyA9IHRoaXMuc3RhdGUuaWRzLnRyaW0oKS5zcGxpdChcIlxcblwiKVxuXG5cdFx0U2V0QWN0aXZlVmlkZW9zTXV0YXRpb24uY29tbWl0KHRoaXMucHJvcHMucmVsYXkuZW52aXJvbm1lbnQsIGlkcylcblx0fVxuXG5cdGNvbXBvbmVudFdpbGxVbm1vdW50KCk6IHZvaWQge1xuXHRcdHN0b3JlLmRpc3BhdGNoKHsgdHlwZTogQWN0aW9uLlJlc2V0U2V0QWN0aXZlVmlkZW9zRmxhZ3MgfSlcblx0fVxuXG5cdHJlbmRlcigpIHtcblx0XHRsZXQgbWVzc2FnZTogc3RyaW5nfFJlYWN0LlJlYWN0Tm9kZXxudWxsID0gbnVsbFxuXHRcdGxldCBtZXNzYWdlQ2xhc3M6IHN0cmluZyA9ICcnXG5cdFx0bGV0IGJ1dHRvblRleHQ6IHN0cmluZ3xudWxsID0gbnVsbFxuXHRcdGxldCBkaXNhYmxlZCA9IGZhbHNlXG5cblx0XHRpZiAodGhpcy5wcm9wcy5zYXZlZCkge1xuXHRcdFx0bWVzc2FnZUNsYXNzID0gJ3N1Y2Nlc3MnXG5cdFx0XHRtZXNzYWdlID0gJ1NldCBhY3RpdmUgdmlkZW9zIHN1Y2Nlc3NmdWxseS4nXG5cdFx0fVxuXHRcdGVsc2UgaWYgKHRoaXMucHJvcHMuc2F2aW5nKSB7XG5cdFx0XHRkaXNhYmxlZCA9IHRydWVcblx0XHRcdGJ1dHRvblRleHQgPSAnU2F2aW5nLi4uJ1xuXHRcdH1cblx0XHRlbHNlIGlmICh0aGlzLnByb3BzLmVycm9yKSB7XG5cdFx0XHRtZXNzYWdlQ2xhc3MgPSAnZXJyb3InXG5cdFx0XHRtZXNzYWdlID0gYEZhaWxlZCBzZXR0aW5nIGFjdGl2ZSB2aWRlb3MgKCR7dGhpcy5wcm9wcy5lcnJvci5tZXNzYWdlfSkuYFxuXHRcdH1cblxuXHRcdGlmIChtZXNzYWdlKVxuXHRcdFx0bWVzc2FnZSA9IChcblx0XHRcdFx0PHAgY2xhc3NOYW1lPXttZXNzYWdlQ2xhc3N9PnttZXNzYWdlfTwvcD5cblx0XHRcdClcblxuXHRcdHJldHVybiAoXG5cdFx0XHQ8c2VjdGlvbiBjbGFzc05hbWU9XCJzZXQtYWN0aXZlLXZpZGVvc1wiPlxuXHRcdFx0XHQ8Zm9ybSBvblN1Ym1pdD17dGhpcy5oYW5kbGVTdWJtaXR9PlxuXHRcdFx0XHRcdDxwPlB1dCBlYWNoIFVSTCBvbiBhIHNlcGFyYXRlIGxpbmUuPC9wPlxuXHRcdFx0XHRcdHttZXNzYWdlfVxuXHRcdFx0XHRcdDx0ZXh0YXJlYSBuYW1lPVwiaWRzXCIgdmFsdWU9e3RoaXMuc3RhdGUuaWRzfSByb3dzPXszMn0gY29scz17NzV9XG5cdFx0XHRcdFx0ICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLmhhbmRsZUlucHV0Q2hhbmdlfSBkaXNhYmxlZD17ZGlzYWJsZWR9XG5cdFx0XHRcdFx0Lz5cblx0XHRcdFx0XHQ8YnV0dG9uIGRpc2FibGVkPXtkaXNhYmxlZH0+e1xuXHRcdFx0XHRcdFx0YnV0dG9uVGV4dCB8fCAnUmVwbGFjZSBBY3RpdmUgVmlkZW9zJ1xuXHRcdFx0XHRcdH08L2J1dHRvbj5cblx0XHRcdFx0PC9mb3JtPlxuXHRcdFx0PC9zZWN0aW9uPlxuXHRcdClcblx0fVxuXG59XG5cblxuZnVuY3Rpb24gbWFwU3RhdGVUb1Byb3BzKHN0b3JlU3RhdGU6IFN0b3JlU3RhdGUsIHByb3BzOiBQcm9wcyk6IFN0YXRlUHJvcHMge1xuXHRjb25zdCB7IHJ0bU93bDogeyBzZXRBY3RpdmVWaWRlb3M6IHN0YXRlIH0gfSA9IHN0b3JlU3RhdGVcblxuXHRyZXR1cm4gT2JqZWN0LmFzc2lnbih7fSwgcHJvcHMse1xuXHRcdHNhdmVkOiBzdGF0ZS5zZXRTdWNjZXNzZnVsbHksXG5cdFx0c2F2aW5nOiBzdGF0ZS5jdXJyZW50bHlCZWluZ1NldCxcblx0XHRlcnJvcjogc3RhdGUuZXJyb3IsXG5cdH0pXG59XG5cblxuY29uc3QgUmVkdXhTZXRBY3RpdmVWaWRlb3NQYWdlID0gY29ubmVjdDxTdGF0ZVByb3BzLCBEaXNwYXRjaFByb3BzLCBPd25Qcm9wcz4oXG5cdG1hcFN0YXRlVG9Qcm9wc1xuKShTZXRBY3RpdmVWaWRlb3NQYWdlKVxuXG5cbmV4cG9ydCBkZWZhdWx0ICBjcmVhdGVGcmFnbWVudENvbnRhaW5lcihSZWR1eFNldEFjdGl2ZVZpZGVvc1BhZ2UsIGdyYXBocWxgXG5cdGZyYWdtZW50IFNldEFjdGl2ZVZpZGVvc1BhZ2VfYWN0aXZlVmlkZW9zIG9uIFZpZGVvIEByZWxheShwbHVyYWw6IHRydWUpIHtcblx0XHRpZFxuXHR9XG5gKVxuIl19