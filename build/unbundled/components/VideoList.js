"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Link = require('found/lib/Link');
const first = require("lodash/first");
const last = require("lodash/last");
const React = require("react");
const Relay = require('react-relay');
const { createFragmentContainer, graphql } = Relay;
const CascadedColumnsList_1 = require("./CascadedColumnsList");
const Video_1 = require("./Video");
require("../../../src/components/VideoList/style.pcss");
var SortField;
(function (SortField) {
    SortField["TheOwl"] = "score";
    SortField["PercentChange"] = "percent";
    SortField["ChangeCount"] = "change";
})(SortField || (SortField = {}));
var SortDirection;
(function (SortDirection) {
    SortDirection["Ascending"] = "asc";
    SortDirection["Descending"] = "desc";
})(SortDirection || (SortDirection = {}));
class VideoList extends React.Component {
    constructor(props) {
        super(props);
    }
    render() {
        const { sorted } = this;
        const percents = sorted.map(vid => vid.percent);
        let chartScale = Math.max(0, ...percents) / 100 + 1;
        if (chartScale < 2)
            chartScale = 2;
        const snapshotCounts = sorted.map(vid => {
            return vid.video.snapshots.length;
        });
        const maxSnapshotCount = Math.max(0, ...snapshotCounts);
        const videos = sorted.map(vid => {
            return (React.createElement(Video_1.default, { key: vid.video.id, id: `video-${vid.video.id}`, video: vid.video, chartScale: chartScale, chartDataPountCount: maxSnapshotCount }));
        });
        return (React.createElement("section", { className: "video-list", ref: ref => this.el = ref },
            React.createElement("nav", null,
                React.createElement("h1", null, "Order:"),
                React.createElement("ul", null, this.sortLinks)),
            React.createElement(CascadedColumnsList_1.default, null, videos)));
    }
    get getParams() {
        const { search } = this.props.location;
        if (!search || search.length === 1)
            return {};
        return search
            .slice(1)
            .split('&')
            .reduce((accl, pair) => {
            const [key, value] = pair.split('=').map(decodeURIComponent);
            accl[key] = value;
            return accl;
        }, {});
    }
    get sort() {
        let { sortField: field, sortDirection: direction } = this.getParams;
        const fields = Object.keys(SortField).map(key => {
            return SortField[key];
        });
        const directions = Object.keys(SortDirection).map(key => {
            return SortDirection[key];
        });
        if (!field || fields.indexOf(field) === -1)
            field = SortField.TheOwl;
        if (!direction || directions.indexOf(direction) === -1)
            direction = SortDirection.Descending;
        return { field: field, direction: direction };
    }
    get sortLinks() {
        const sorts = {
            [SortField.TheOwl]: 'As the Owl Flies',
            [SortField.ChangeCount]: 'Count',
            [SortField.PercentChange]: 'Percent',
        };
        return Object.keys(sorts).map(field => {
            const isActive = field === this.sort.field;
            const classes = [];
            if (isActive)
                classes.push('active');
            const sortDirection = isActive && this.sort.direction === SortDirection.Descending
                ? SortDirection.Ascending : SortDirection.Descending;
            classes.push(sortDirection);
            const params = { sortField: field, sortDirection };
            const search = Object.keys(params).map(key => {
                return encodeURIComponent(key) + '=' + encodeURIComponent(params[key]);
            });
            return (React.createElement("li", { key: field, className: classes.join(' ') },
                React.createElement(Link, { to: {
                        pathname: this.props.location.pathname,
                        search: '?' + search.join('&')
                    } }, sorts[field])));
        });
    }
    get scored() {
        return this.props.activeVideos.map(vid => {
            const start = first(vid.snapshots);
            const end = last(vid.snapshots);
            const startCount = start != null
                ? [start.views, start.likes, start.dislikes, start.favorites,
                    start.comments]
                    .map(Number).reduce((sum, num) => sum + num, 0)
                : 0;
            const endCount = end != null
                ? [end.views, end.likes, end.dislikes, end.favorites, end.comments]
                    .map(Number).reduce((sum, num) => sum + num, 0)
                : 0;
            const change = endCount - startCount;
            const ratio = (endCount / startCount) || 0;
            return {
                video: vid,
                score: change * Math.pow((ratio - 1), 2),
                percent: (ratio * 100) - 100,
                change,
            };
        });
    }
    get sorted() {
        return this.scored.sort((vid1, vid2) => {
            const { field, direction } = this.sort;
            const [a, b] = direction === SortDirection.Descending
                ? [vid2, vid1] : [vid1, vid2];
            // Field values can be NaN. Prevents items without stats sorting weirdly.
            return (a[field] || 0) - (b[field] || 0);
        });
    }
}
exports.default = createFragmentContainer(VideoList, graphql `
	fragment VideoList_activeVideos on Video @relay(plural: true) {
		id
    snapshots: statsByAge(seconds: $statsAge) {
      views
      likes
      dislikes
      favorites
      comments
    }
		...Video_video
	}
`);
//# sourceMappingURL=data:application/json;base64,